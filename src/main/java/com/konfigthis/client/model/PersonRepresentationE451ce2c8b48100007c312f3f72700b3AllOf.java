/*
 * person
 * The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UniversalIDE451ce2c8b48100007c31392a1ff00c2;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf {
  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private String photos;

  public static final String SERIALIZED_NAME_HOME_EMAILS = "homeEmails";
  @SerializedName(SERIALIZED_NAME_HOME_EMAILS)
  private String homeEmails;

  public static final String SERIALIZED_NAME_PERSONAL_INFORMATION = "personalInformation";
  @SerializedName(SERIALIZED_NAME_PERSONAL_INFORMATION)
  private String personalInformation;

  public static final String SERIALIZED_NAME_HOME_WEB_ADDRESSES = "homeWebAddresses";
  @SerializedName(SERIALIZED_NAME_HOME_WEB_ADDRESSES)
  private String homeWebAddresses;

  public static final String SERIALIZED_NAME_UNIVERSAL_I_D = "universal_ID";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_I_D)
  private UniversalIDE451ce2c8b48100007c31392a1ff00c2 universalID;

  public static final String SERIALIZED_NAME_WORK_INSTANT_MESSENGERS = "workInstantMessengers";
  @SerializedName(SERIALIZED_NAME_WORK_INSTANT_MESSENGERS)
  private String workInstantMessengers;

  public static final String SERIALIZED_NAME_HOME_PHONES = "homePhones";
  @SerializedName(SERIALIZED_NAME_HOME_PHONES)
  private String homePhones;

  public static final String SERIALIZED_NAME_PREFERRED_NAME = "preferredName";
  @SerializedName(SERIALIZED_NAME_PREFERRED_NAME)
  private String preferredName;

  public static final String SERIALIZED_NAME_WORK_EMAILS = "workEmails";
  @SerializedName(SERIALIZED_NAME_WORK_EMAILS)
  private String workEmails;

  public static final String SERIALIZED_NAME_WORK_ADDRESSES = "workAddresses";
  @SerializedName(SERIALIZED_NAME_WORK_ADDRESSES)
  private String workAddresses;

  public static final String SERIALIZED_NAME_WORK_WEB_ADDRESSES = "workWebAddresses";
  @SerializedName(SERIALIZED_NAME_WORK_WEB_ADDRESSES)
  private String workWebAddresses;

  public static final String SERIALIZED_NAME_HOME_ADDRESSES = "homeAddresses";
  @SerializedName(SERIALIZED_NAME_HOME_ADDRESSES)
  private String homeAddresses;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_AUDIO_NAME_PRONUNCIATION = "audioNamePronunciation";
  @SerializedName(SERIALIZED_NAME_AUDIO_NAME_PRONUNCIATION)
  private String audioNamePronunciation;

  public static final String SERIALIZED_NAME_SOCIAL_NETWORKS = "socialNetworks";
  @SerializedName(SERIALIZED_NAME_SOCIAL_NETWORKS)
  private String socialNetworks;

  public static final String SERIALIZED_NAME_WORK_PHONES = "workPhones";
  @SerializedName(SERIALIZED_NAME_WORK_PHONES)
  private String workPhones;

  public static final String SERIALIZED_NAME_ADDITIONAL_NAMES = "additionalNames";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_NAMES)
  private String additionalNames;

  public static final String SERIALIZED_NAME_HOME_INSTANT_MESSENGERS = "homeInstantMessengers";
  @SerializedName(SERIALIZED_NAME_HOME_INSTANT_MESSENGERS)
  private String homeInstantMessengers;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf() {
  }

  
  public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf(
     String photos, 
     String homeEmails, 
     String personalInformation, 
     String homeWebAddresses, 
     String workInstantMessengers, 
     String homePhones, 
     String preferredName, 
     String workEmails, 
     String workAddresses, 
     String workWebAddresses, 
     String homeAddresses, 
     String legalName, 
     String audioNamePronunciation, 
     String socialNetworks, 
     String workPhones, 
     String additionalNames, 
     String homeInstantMessengers
  ) {
    this();
    this.photos = photos;
    this.homeEmails = homeEmails;
    this.personalInformation = personalInformation;
    this.homeWebAddresses = homeWebAddresses;
    this.workInstantMessengers = workInstantMessengers;
    this.homePhones = homePhones;
    this.preferredName = preferredName;
    this.workEmails = workEmails;
    this.workAddresses = workAddresses;
    this.workWebAddresses = workWebAddresses;
    this.homeAddresses = homeAddresses;
    this.legalName = legalName;
    this.audioNamePronunciation = audioNamePronunciation;
    this.socialNetworks = socialNetworks;
    this.workPhones = workPhones;
    this.additionalNames = additionalNames;
    this.homeInstantMessengers = homeInstantMessengers;
  }

   /**
   * The image for the person.
   * @return photos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The image for the person.")

  public String getPhotos() {
    return photos;
  }




   /**
   * The home email addresses for a person.
   * @return homeEmails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The home email addresses for a person.")

  public String getHomeEmails() {
    return homeEmails;
  }




   /**
   * The person.
   * @return personalInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The person.")

  public String getPersonalInformation() {
    return personalInformation;
  }




   /**
   * The home web addresses for a person.
   * @return homeWebAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The home web addresses for a person.")

  public String getHomeWebAddresses() {
    return homeWebAddresses;
  }




  public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf universalID(UniversalIDE451ce2c8b48100007c31392a1ff00c2 universalID) {
    
    
    
    
    this.universalID = universalID;
    return this;
  }

   /**
   * Get universalID
   * @return universalID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UniversalIDE451ce2c8b48100007c31392a1ff00c2 getUniversalID() {
    return universalID;
  }


  public void setUniversalID(UniversalIDE451ce2c8b48100007c31392a1ff00c2 universalID) {
    
    
    
    this.universalID = universalID;
  }


   /**
   * The work instant messenger accounts for a person.
   * @return workInstantMessengers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work instant messenger accounts for a person.")

  public String getWorkInstantMessengers() {
    return workInstantMessengers;
  }




   /**
   * The home phone numbers for a person.
   * @return homePhones
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The home phone numbers for a person.")

  public String getHomePhones() {
    return homePhones;
  }




   /**
   * The preferred name for a person.
   * @return preferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The preferred name for a person.")

  public String getPreferredName() {
    return preferredName;
  }




   /**
   * The work email addresses for a person.
   * @return workEmails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work email addresses for a person.")

  public String getWorkEmails() {
    return workEmails;
  }




   /**
   * The work addresses for a person.
   * @return workAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work addresses for a person.")

  public String getWorkAddresses() {
    return workAddresses;
  }




   /**
   * The work web addresses for a person.
   * @return workWebAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work web addresses for a person.")

  public String getWorkWebAddresses() {
    return workWebAddresses;
  }




   /**
   * The home addresses for a person.
   * @return homeAddresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The home addresses for a person.")

  public String getHomeAddresses() {
    return homeAddresses;
  }




   /**
   * The Legal Name for a person.
   * @return legalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Legal Name for a person.")

  public String getLegalName() {
    return legalName;
  }




   /**
   * The Media related to Audio Name Pronunciation for a Person
   * @return audioNamePronunciation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Media related to Audio Name Pronunciation for a Person")

  public String getAudioNamePronunciation() {
    return audioNamePronunciation;
  }




   /**
   * The social network accounts for a person.
   * @return socialNetworks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The social network accounts for a person.")

  public String getSocialNetworks() {
    return socialNetworks;
  }




   /**
   * The work phone numbers for a person.
   * @return workPhones
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The work phone numbers for a person.")

  public String getWorkPhones() {
    return workPhones;
  }




   /**
   * The additional names for a person.
   * @return additionalNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The additional names for a person.")

  public String getAdditionalNames() {
    return additionalNames;
  }




   /**
   * The home instant messenger accounts for a person.
   * @return homeInstantMessengers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The home instant messenger accounts for a person.")

  public String getHomeInstantMessengers() {
    return homeInstantMessengers;
  }




  public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf href(String href) {
    
    
    
    
    this.href = href;
    return this;
  }

   /**
   * A link to the instance
   * @return href
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A link to the instance")

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    
    
    
    this.href = href;
  }


  public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Id of the instance
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Id of the instance")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf instance itself
   */
  public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf = (PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf) o;
    return Objects.equals(this.photos, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.photos) &&
        Objects.equals(this.homeEmails, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.homeEmails) &&
        Objects.equals(this.personalInformation, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.personalInformation) &&
        Objects.equals(this.homeWebAddresses, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.homeWebAddresses) &&
        Objects.equals(this.universalID, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.universalID) &&
        Objects.equals(this.workInstantMessengers, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.workInstantMessengers) &&
        Objects.equals(this.homePhones, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.homePhones) &&
        Objects.equals(this.preferredName, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.preferredName) &&
        Objects.equals(this.workEmails, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.workEmails) &&
        Objects.equals(this.workAddresses, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.workAddresses) &&
        Objects.equals(this.workWebAddresses, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.workWebAddresses) &&
        Objects.equals(this.homeAddresses, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.homeAddresses) &&
        Objects.equals(this.legalName, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.legalName) &&
        Objects.equals(this.audioNamePronunciation, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.audioNamePronunciation) &&
        Objects.equals(this.socialNetworks, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.socialNetworks) &&
        Objects.equals(this.workPhones, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.workPhones) &&
        Objects.equals(this.additionalNames, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.additionalNames) &&
        Objects.equals(this.homeInstantMessengers, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.homeInstantMessengers) &&
        Objects.equals(this.href, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.href) &&
        Objects.equals(this.id, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.id)&&
        Objects.equals(this.additionalProperties, personRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(photos, homeEmails, personalInformation, homeWebAddresses, universalID, workInstantMessengers, homePhones, preferredName, workEmails, workAddresses, workWebAddresses, homeAddresses, legalName, audioNamePronunciation, socialNetworks, workPhones, additionalNames, homeInstantMessengers, href, id, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf {\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    homeEmails: ").append(toIndentedString(homeEmails)).append("\n");
    sb.append("    personalInformation: ").append(toIndentedString(personalInformation)).append("\n");
    sb.append("    homeWebAddresses: ").append(toIndentedString(homeWebAddresses)).append("\n");
    sb.append("    universalID: ").append(toIndentedString(universalID)).append("\n");
    sb.append("    workInstantMessengers: ").append(toIndentedString(workInstantMessengers)).append("\n");
    sb.append("    homePhones: ").append(toIndentedString(homePhones)).append("\n");
    sb.append("    preferredName: ").append(toIndentedString(preferredName)).append("\n");
    sb.append("    workEmails: ").append(toIndentedString(workEmails)).append("\n");
    sb.append("    workAddresses: ").append(toIndentedString(workAddresses)).append("\n");
    sb.append("    workWebAddresses: ").append(toIndentedString(workWebAddresses)).append("\n");
    sb.append("    homeAddresses: ").append(toIndentedString(homeAddresses)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    audioNamePronunciation: ").append(toIndentedString(audioNamePronunciation)).append("\n");
    sb.append("    socialNetworks: ").append(toIndentedString(socialNetworks)).append("\n");
    sb.append("    workPhones: ").append(toIndentedString(workPhones)).append("\n");
    sb.append("    additionalNames: ").append(toIndentedString(additionalNames)).append("\n");
    sb.append("    homeInstantMessengers: ").append(toIndentedString(homeInstantMessengers)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("photos");
    openapiFields.add("homeEmails");
    openapiFields.add("personalInformation");
    openapiFields.add("homeWebAddresses");
    openapiFields.add("universal_ID");
    openapiFields.add("workInstantMessengers");
    openapiFields.add("homePhones");
    openapiFields.add("preferredName");
    openapiFields.add("workEmails");
    openapiFields.add("workAddresses");
    openapiFields.add("workWebAddresses");
    openapiFields.add("homeAddresses");
    openapiFields.add("legalName");
    openapiFields.add("audioNamePronunciation");
    openapiFields.add("socialNetworks");
    openapiFields.add("workPhones");
    openapiFields.add("additionalNames");
    openapiFields.add("homeInstantMessengers");
    openapiFields.add("href");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf is not found in the empty JSON string", PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("photos") != null && !jsonObj.get("photos").isJsonNull()) && !jsonObj.get("photos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photos").toString()));
      }
      if ((jsonObj.get("homeEmails") != null && !jsonObj.get("homeEmails").isJsonNull()) && !jsonObj.get("homeEmails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeEmails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeEmails").toString()));
      }
      if ((jsonObj.get("personalInformation") != null && !jsonObj.get("personalInformation").isJsonNull()) && !jsonObj.get("personalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalInformation").toString()));
      }
      if ((jsonObj.get("homeWebAddresses") != null && !jsonObj.get("homeWebAddresses").isJsonNull()) && !jsonObj.get("homeWebAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeWebAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeWebAddresses").toString()));
      }
      // validate the optional field `universal_ID`
      if (jsonObj.get("universal_ID") != null && !jsonObj.get("universal_ID").isJsonNull()) {
        UniversalIDE451ce2c8b48100007c31392a1ff00c2.validateJsonObject(jsonObj.getAsJsonObject("universal_ID"));
      }
      if ((jsonObj.get("workInstantMessengers") != null && !jsonObj.get("workInstantMessengers").isJsonNull()) && !jsonObj.get("workInstantMessengers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workInstantMessengers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workInstantMessengers").toString()));
      }
      if ((jsonObj.get("homePhones") != null && !jsonObj.get("homePhones").isJsonNull()) && !jsonObj.get("homePhones").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homePhones` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homePhones").toString()));
      }
      if ((jsonObj.get("preferredName") != null && !jsonObj.get("preferredName").isJsonNull()) && !jsonObj.get("preferredName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredName").toString()));
      }
      if ((jsonObj.get("workEmails") != null && !jsonObj.get("workEmails").isJsonNull()) && !jsonObj.get("workEmails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workEmails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workEmails").toString()));
      }
      if ((jsonObj.get("workAddresses") != null && !jsonObj.get("workAddresses").isJsonNull()) && !jsonObj.get("workAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workAddresses").toString()));
      }
      if ((jsonObj.get("workWebAddresses") != null && !jsonObj.get("workWebAddresses").isJsonNull()) && !jsonObj.get("workWebAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workWebAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workWebAddresses").toString()));
      }
      if ((jsonObj.get("homeAddresses") != null && !jsonObj.get("homeAddresses").isJsonNull()) && !jsonObj.get("homeAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeAddresses").toString()));
      }
      if ((jsonObj.get("legalName") != null && !jsonObj.get("legalName").isJsonNull()) && !jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if ((jsonObj.get("audioNamePronunciation") != null && !jsonObj.get("audioNamePronunciation").isJsonNull()) && !jsonObj.get("audioNamePronunciation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audioNamePronunciation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audioNamePronunciation").toString()));
      }
      if ((jsonObj.get("socialNetworks") != null && !jsonObj.get("socialNetworks").isJsonNull()) && !jsonObj.get("socialNetworks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialNetworks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialNetworks").toString()));
      }
      if ((jsonObj.get("workPhones") != null && !jsonObj.get("workPhones").isJsonNull()) && !jsonObj.get("workPhones").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workPhones` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workPhones").toString()));
      }
      if ((jsonObj.get("additionalNames") != null && !jsonObj.get("additionalNames").isJsonNull()) && !jsonObj.get("additionalNames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalNames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalNames").toString()));
      }
      if ((jsonObj.get("homeInstantMessengers") != null && !jsonObj.get("homeInstantMessengers").isJsonNull()) && !jsonObj.get("homeInstantMessengers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeInstantMessengers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeInstantMessengers").toString()));
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf>() {
           @Override
           public void write(JsonWriter out, PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf
  * @throws IOException if the JSON string is invalid with respect to PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf
  */
  public static PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf.class);
  }

 /**
  * Convert an instance of PersonRepresentationE451ce2c8b48100007c312f3f72700b3AllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

