/*
 * person
 * The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.MULTIPLEINSTANCEMODELREFERENCE;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PromptValuesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PromptValuesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PromptValuesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllowedCountryDataCall(Long limit, Long offset, String person, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/personalInformationCountry/allowedCountry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (person != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person", person));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllowedCountryDataValidateBeforeCall(Long limit, Long offset, String person, final ApiCallback _callback) throws ApiException {
        return getAllowedCountryDataCall(limit, offset, person, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getAllowedCountryDataWithHttpInfo(Long limit, Long offset, String person) throws ApiException {
        okhttp3.Call localVarCall = getAllowedCountryDataValidateBeforeCall(limit, offset, person, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllowedCountryDataAsync(Long limit, Long offset, String person, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllowedCountryDataValidateBeforeCall(limit, offset, person, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllowedCountryDataRequestBuilder {
        private Long limit;
        private Long offset;
        private String person;

        private GetAllowedCountryDataRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetAllowedCountryDataRequestBuilder
         */
        public GetAllowedCountryDataRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAllowedCountryDataRequestBuilder
         */
        public GetAllowedCountryDataRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set person
         * @param person  (optional)
         * @return GetAllowedCountryDataRequestBuilder
         */
        public GetAllowedCountryDataRequestBuilder person(String person) {
            this.person = person;
            return this;
        }
        
        /**
         * Build call for getAllowedCountryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllowedCountryDataCall(limit, offset, person, _callback);
        }


        /**
         * Execute getAllowedCountryData request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getAllowedCountryDataWithHttpInfo(limit, offset, person);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllowedCountryData request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getAllowedCountryDataWithHttpInfo(limit, offset, person);
        }

        /**
         * Execute getAllowedCountryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getAllowedCountryDataAsync(limit, offset, person, _callback);
        }
    }

    /**
     * 
     * The set of countries a person is allowed to populated with country specific data.
     * @return GetAllowedCountryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllowedCountryDataRequestBuilder getAllowedCountryData() throws IllegalArgumentException {
        return new GetAllowedCountryDataRequestBuilder();
    }
    private okhttp3.Call getCountryPhoneCodesCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/commonPhone/countryPhoneCodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountryPhoneCodesValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getCountryPhoneCodesCall(limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getCountryPhoneCodesWithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getCountryPhoneCodesValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCountryPhoneCodesAsync(Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountryPhoneCodesValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCountryPhoneCodesRequestBuilder {
        private Long limit;
        private Long offset;

        private GetCountryPhoneCodesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetCountryPhoneCodesRequestBuilder
         */
        public GetCountryPhoneCodesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCountryPhoneCodesRequestBuilder
         */
        public GetCountryPhoneCodesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCountryPhoneCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCountryPhoneCodesCall(limit, offset, _callback);
        }


        /**
         * Execute getCountryPhoneCodes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getCountryPhoneCodesWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCountryPhoneCodes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getCountryPhoneCodesWithHttpInfo(limit, offset);
        }

        /**
         * Execute getCountryPhoneCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getCountryPhoneCodesAsync(limit, offset, _callback);
        }
    }

    /**
     * 
     * Exposes prompting for country phone codes, which are used during the collection of phone numbers.
     * @return GetCountryPhoneCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCountryPhoneCodesRequestBuilder getCountryPhoneCodes() throws IllegalArgumentException {
        return new GetCountryPhoneCodesRequestBuilder();
    }
    private okhttp3.Call getHereditaryValuesCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/hereditary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHereditaryValuesValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getHereditaryValuesCall(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getHereditaryValuesWithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getHereditaryValuesValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHereditaryValuesAsync(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHereditaryValuesValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHereditaryValuesRequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetHereditaryValuesRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetHereditaryValuesRequestBuilder
         */
        public GetHereditaryValuesRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetHereditaryValuesRequestBuilder
         */
        public GetHereditaryValuesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetHereditaryValuesRequestBuilder
         */
        public GetHereditaryValuesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getHereditaryValues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHereditaryValuesCall(country, limit, offset, _callback);
        }


        /**
         * Execute getHereditaryValues request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getHereditaryValuesWithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHereditaryValues request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getHereditaryValuesWithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getHereditaryValues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getHereditaryValuesAsync(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetHereditaryValuesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHereditaryValuesRequestBuilder getHereditaryValues() throws IllegalArgumentException {
        return new GetHereditaryValuesRequestBuilder();
    }
    private okhttp3.Call getInstancesCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/religious";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstancesValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstancesCall(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstancesWithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstancesAsync(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstancesValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstancesRequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetInstancesRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstancesRequestBuilder
         */
        public GetInstancesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstancesCall(country, limit, offset, _callback);
        }


        /**
         * Execute getInstances request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstancesWithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstancesWithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstancesAsync(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstancesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstancesRequestBuilder getInstances() throws IllegalArgumentException {
        return new GetInstancesRequestBuilder();
    }
    private okhttp3.Call getInstances_0Call(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/honorary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_0ValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_0Call(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_0WithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_0ValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_0Async(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_0ValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances0RequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetInstances0RequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances0RequestBuilder
         */
        public GetInstances0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_0Call(country, limit, offset, _callback);
        }


        /**
         * Execute getInstances_0 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_0WithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_0 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_0WithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getInstances_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_0Async(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances0RequestBuilder getInstances_0() throws IllegalArgumentException {
        return new GetInstances0RequestBuilder();
    }
    private okhttp3.Call getInstances_1Call(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/countryComponents/countryCity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_1ValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_1Call(limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_1WithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_1ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_1Async(Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_1ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances1RequestBuilder {
        private Long limit;
        private Long offset;

        private GetInstances1RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances1RequestBuilder
         */
        public GetInstances1RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_1Call(limit, offset, _callback);
        }


        /**
         * Execute getInstances_1 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_1WithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_1 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_1WithHttpInfo(limit, offset);
        }

        /**
         * Execute getInstances_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_1Async(limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances1RequestBuilder getInstances_1() throws IllegalArgumentException {
        return new GetInstances1RequestBuilder();
    }
    private okhttp3.Call getInstances_2Call(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/social";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_2ValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_2Call(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_2WithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_2ValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_2Async(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_2ValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances2RequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetInstances2RequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances2RequestBuilder
         */
        public GetInstances2RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_2Call(country, limit, offset, _callback);
        }


        /**
         * Execute getInstances_2 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_2WithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_2 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_2WithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getInstances_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_2Async(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances2RequestBuilder getInstances_2() throws IllegalArgumentException {
        return new GetInstances2RequestBuilder();
    }
    private okhttp3.Call getInstances_3Call(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/countryComponents/country";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_3ValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_3Call(limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_3WithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_3ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_3Async(Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_3ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances3RequestBuilder {
        private Long limit;
        private Long offset;

        private GetInstances3RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances3RequestBuilder
         */
        public GetInstances3RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_3
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_3Call(limit, offset, _callback);
        }


        /**
         * Execute getInstances_3 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_3WithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_3 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_3WithHttpInfo(limit, offset);
        }

        /**
         * Execute getInstances_3 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_3Async(limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances3RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances3RequestBuilder getInstances_3() throws IllegalArgumentException {
        return new GetInstances3RequestBuilder();
    }
    private okhttp3.Call getInstances_4Call(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/academic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_4ValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_4Call(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_4WithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_4ValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_4Async(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_4ValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances4RequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetInstances4RequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances4RequestBuilder
         */
        public GetInstances4RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_4
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_4Call(country, limit, offset, _callback);
        }


        /**
         * Execute getInstances_4 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_4WithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_4 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_4WithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getInstances_4 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_4Async(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances4RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances4RequestBuilder getInstances_4() throws IllegalArgumentException {
        return new GetInstances4RequestBuilder();
    }
    private okhttp3.Call getInstances_5Call(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/countryComponents/countryRegion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstances_5ValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getInstances_5Call(limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getInstances_5WithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getInstances_5ValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstances_5Async(Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstances_5ValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstances5RequestBuilder {
        private Long limit;
        private Long offset;

        private GetInstances5RequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetInstances5RequestBuilder
         */
        public GetInstances5RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getInstances_5
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstances_5Call(limit, offset, _callback);
        }


        /**
         * Execute getInstances_5 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getInstances_5WithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstances_5 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getInstances_5WithHttpInfo(limit, offset);
        }

        /**
         * Execute getInstances_5 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getInstances_5Async(limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetInstances5RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstances5RequestBuilder getInstances_5() throws IllegalArgumentException {
        return new GetInstances5RequestBuilder();
    }
    private okhttp3.Call getOptionsCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/royal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionsValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getOptionsCall(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getOptionsWithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptionsAsync(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOptionsRequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetOptionsRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetOptionsRequestBuilder
         */
        public GetOptionsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptionsCall(country, limit, offset, _callback);
        }


        /**
         * Execute getOptions request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getOptionsWithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOptions request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getOptionsWithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getOptionsAsync(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOptionsRequestBuilder getOptions() throws IllegalArgumentException {
        return new GetOptionsRequestBuilder();
    }
    private okhttp3.Call getOptions_0Call(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/salutation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptions_0ValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getOptions_0Call(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getOptions_0WithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getOptions_0ValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptions_0Async(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptions_0ValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOptions0RequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetOptions0RequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetOptions0RequestBuilder
         */
        public GetOptions0RequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetOptions0RequestBuilder
         */
        public GetOptions0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetOptions0RequestBuilder
         */
        public GetOptions0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getOptions_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptions_0Call(country, limit, offset, _callback);
        }


        /**
         * Execute getOptions_0 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getOptions_0WithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOptions_0 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getOptions_0WithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getOptions_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getOptions_0Async(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetOptions0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOptions0RequestBuilder getOptions_0() throws IllegalArgumentException {
        return new GetOptions0RequestBuilder();
    }
    private okhttp3.Call getOptions_1Call(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/professional";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptions_1ValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getOptions_1Call(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getOptions_1WithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getOptions_1ValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptions_1Async(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptions_1ValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOptions1RequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetOptions1RequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetOptions1RequestBuilder
         */
        public GetOptions1RequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetOptions1RequestBuilder
         */
        public GetOptions1RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetOptions1RequestBuilder
         */
        public GetOptions1RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getOptions_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptions_1Call(country, limit, offset, _callback);
        }


        /**
         * Execute getOptions_1 request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getOptions_1WithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOptions_1 request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getOptions_1WithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getOptions_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getOptions_1Async(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetOptions1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetOptions1RequestBuilder getOptions_1() throws IllegalArgumentException {
        return new GetOptions1RequestBuilder();
    }
    private okhttp3.Call getPhoneDeviceTypesCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/commonPhone/phoneDeviceTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneDeviceTypesValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getPhoneDeviceTypesCall(limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getPhoneDeviceTypesWithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPhoneDeviceTypesValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneDeviceTypesAsync(Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneDeviceTypesValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhoneDeviceTypesRequestBuilder {
        private Long limit;
        private Long offset;

        private GetPhoneDeviceTypesRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetPhoneDeviceTypesRequestBuilder
         */
        public GetPhoneDeviceTypesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPhoneDeviceTypesRequestBuilder
         */
        public GetPhoneDeviceTypesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPhoneDeviceTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneDeviceTypesCall(limit, offset, _callback);
        }


        /**
         * Execute getPhoneDeviceTypes request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getPhoneDeviceTypesWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhoneDeviceTypes request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getPhoneDeviceTypesWithHttpInfo(limit, offset);
        }

        /**
         * Execute getPhoneDeviceTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getPhoneDeviceTypesAsync(limit, offset, _callback);
        }
    }

    /**
     * 
     * Exposes prompting for phone device types, which are used during the collection of phone numbers.
     * @return GetPhoneDeviceTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPhoneDeviceTypesRequestBuilder getPhoneDeviceTypes() throws IllegalArgumentException {
        return new GetPhoneDeviceTypesRequestBuilder();
    }
    private okhttp3.Call getTitleComponentsCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/nameComponents/title";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTitleComponentsValidateBeforeCall(String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getTitleComponentsCall(country, limit, offset, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> getTitleComponentsWithHttpInfo(String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getTitleComponentsValidateBeforeCall(country, limit, offset, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTitleComponentsAsync(String country, Long limit, Long offset, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTitleComponentsValidateBeforeCall(country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTitleComponentsRequestBuilder {
        private String country;
        private Long limit;
        private Long offset;

        private GetTitleComponentsRequestBuilder() {
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetTitleComponentsRequestBuilder
         */
        public GetTitleComponentsRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return GetTitleComponentsRequestBuilder
         */
        public GetTitleComponentsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetTitleComponentsRequestBuilder
         */
        public GetTitleComponentsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getTitleComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTitleComponentsCall(country, limit, offset, _callback);
        }


        /**
         * Execute getTitleComponents request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = getTitleComponentsWithHttpInfo(country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTitleComponents request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return getTitleComponentsWithHttpInfo(country, limit, offset);
        }

        /**
         * Execute getTitleComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return getTitleComponentsAsync(country, limit, offset, _callback);
        }
    }

    /**
     * 
     * Retrieves instances that can be used as values for other endpoint parameters in this service.
     * @return GetTitleComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetTitleComponentsRequestBuilder getTitleComponents() throws IllegalArgumentException {
        return new GetTitleComponentsRequestBuilder();
    }
    private okhttp3.Call listCountryDataCall(Long limit, Long offset, String person, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/values/personalInformationCountry/populatedCountry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (person != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("person", person));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCountryDataValidateBeforeCall(Long limit, Long offset, String person, final ApiCallback _callback) throws ApiException {
        return listCountryDataCall(limit, offset, person, _callback);

    }


    private ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> listCountryDataWithHttpInfo(Long limit, Long offset, String person) throws ApiException {
        okhttp3.Call localVarCall = listCountryDataValidateBeforeCall(limit, offset, person, null);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCountryDataAsync(Long limit, Long offset, String person, final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCountryDataValidateBeforeCall(limit, offset, person, _callback);
        Type localVarReturnType = new TypeToken<MULTIPLEINSTANCEMODELREFERENCE>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCountryDataRequestBuilder {
        private Long limit;
        private Long offset;
        private String person;

        private ListCountryDataRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default and maximum is 1000. (optional)
         * @return ListCountryDataRequestBuilder
         */
        public ListCountryDataRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return ListCountryDataRequestBuilder
         */
        public ListCountryDataRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set person
         * @param person  (optional)
         * @return ListCountryDataRequestBuilder
         */
        public ListCountryDataRequestBuilder person(String person) {
            this.person = person;
            return this;
        }
        
        /**
         * Build call for listCountryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCountryDataCall(limit, offset, person, _callback);
        }


        /**
         * Execute listCountryData request
         * @return MULTIPLEINSTANCEMODELREFERENCE
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MULTIPLEINSTANCEMODELREFERENCE execute() throws ApiException {
            ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> localVarResp = listCountryDataWithHttpInfo(limit, offset, person);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCountryData request with HTTP info returned
         * @return ApiResponse&lt;MULTIPLEINSTANCEMODELREFERENCE&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MULTIPLEINSTANCEMODELREFERENCE> executeWithHttpInfo() throws ApiException {
            return listCountryDataWithHttpInfo(limit, offset, person);
        }

        /**
         * Execute listCountryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MULTIPLEINSTANCEMODELREFERENCE> _callback) throws ApiException {
            return listCountryDataAsync(limit, offset, person, _callback);
        }
    }

    /**
     * 
     * The set of countries a person has populated with country specific data.
     * @return ListCountryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ListCountryDataRequestBuilder listCountryData() throws IllegalArgumentException {
        return new ListCountryDataRequestBuilder();
    }
}
