/*
 * person
 * The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CountriesGetAddressComponentsResponse;
import com.konfigthis.client.model.CountriesGetCollectionInformationResponse;
import com.konfigthis.client.model.CountriesGetNameComponentsResponse;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CountriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CountriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CountriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAddressComponentsCall(String ID, String addressConfigurationFormat, String currentAddress, Long limit, Long offset, Boolean useWesternScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{ID}/addressComponents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressConfigurationFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressConfigurationFormat", addressConfigurationFormat));
        }

        if (currentAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentAddress", currentAddress));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (useWesternScript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useWesternScript", useWesternScript));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressComponentsValidateBeforeCall(String ID, String addressConfigurationFormat, String currentAddress, Long limit, Long offset, Boolean useWesternScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAddressComponents(Async)");
        }

        return getAddressComponentsCall(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript, _callback);

    }


    private ApiResponse<CountriesGetAddressComponentsResponse> getAddressComponentsWithHttpInfo(String ID, String addressConfigurationFormat, String currentAddress, Long limit, Long offset, Boolean useWesternScript) throws ApiException {
        okhttp3.Call localVarCall = getAddressComponentsValidateBeforeCall(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript, null);
        Type localVarReturnType = new TypeToken<CountriesGetAddressComponentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAddressComponentsAsync(String ID, String addressConfigurationFormat, String currentAddress, Long limit, Long offset, Boolean useWesternScript, final ApiCallback<CountriesGetAddressComponentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressComponentsValidateBeforeCall(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript, _callback);
        Type localVarReturnType = new TypeToken<CountriesGetAddressComponentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAddressComponentsRequestBuilder {
        private final String ID;
        private String addressConfigurationFormat;
        private String currentAddress;
        private Long limit;
        private Long offset;
        private Boolean useWesternScript;

        private GetAddressComponentsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set addressConfigurationFormat
         * @param addressConfigurationFormat The Address Configuration Format to return values for.  Required. Failure to provide this will result in no address components being returned. Available values are: - DEFAULT_AREAS - RECRUITING_FORMAT (optional)
         * @return GetAddressComponentsRequestBuilder
         */
        public GetAddressComponentsRequestBuilder addressConfigurationFormat(String addressConfigurationFormat) {
            this.addressConfigurationFormat = addressConfigurationFormat;
            return this;
        }
        
        /**
         * Set currentAddress
         * @param currentAddress The existing address being updated.  Required when you use Default Format and a Country using Local Script to get component data for an existing address. Failure to provide this when appropriate may result in incorrect address component data being returned. (optional)
         * @return GetAddressComponentsRequestBuilder
         */
        public GetAddressComponentsRequestBuilder currentAddress(String currentAddress) {
            this.currentAddress = currentAddress;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetAddressComponentsRequestBuilder
         */
        public GetAddressComponentsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAddressComponentsRequestBuilder
         */
        public GetAddressComponentsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set useWesternScript
         * @param useWesternScript Enables Local Script components for Countries using Local Script in Default Format. Optional. When applicable, setting this value to true will enable Local Script components and enforce Western Components as optional. Local Components that are requireable will be enforced as required. (optional)
         * @return GetAddressComponentsRequestBuilder
         */
        public GetAddressComponentsRequestBuilder useWesternScript(Boolean useWesternScript) {
            this.useWesternScript = useWesternScript;
            return this;
        }
        
        /**
         * Build call for getAddressComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAddressComponentsCall(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript, _callback);
        }


        /**
         * Execute getAddressComponents request
         * @return CountriesGetAddressComponentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CountriesGetAddressComponentsResponse execute() throws ApiException {
            ApiResponse<CountriesGetAddressComponentsResponse> localVarResp = getAddressComponentsWithHttpInfo(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAddressComponents request with HTTP info returned
         * @return ApiResponse&lt;CountriesGetAddressComponentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountriesGetAddressComponentsResponse> executeWithHttpInfo() throws ApiException {
            return getAddressComponentsWithHttpInfo(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript);
        }

        /**
         * Execute getAddressComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountriesGetAddressComponentsResponse> _callback) throws ApiException {
            return getAddressComponentsAsync(ID, addressConfigurationFormat, currentAddress, limit, offset, useWesternScript, _callback);
        }
    }

    /**
     * Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format. The webServiceAlias of the returned address components map to the enterable fields when submitting address data in other POST/PUT/PATCH operations.
     * Retrieves the allowed address components and their configuration for the Country and a given Address Configuration Format.  Secured by: REST API Public
     * @param ID The Workday ID of the resource. (required)
     * @return GetAddressComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressComponentsRequestBuilder getAddressComponents(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetAddressComponentsRequestBuilder(ID);
    }
    private okhttp3.Call getCollectionInformationCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionInformationValidateBeforeCall(Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        return getCollectionInformationCall(limit, offset, _callback);

    }


    private ApiResponse<CountriesGetCollectionInformationResponse> getCollectionInformationWithHttpInfo(Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getCollectionInformationValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<CountriesGetCollectionInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollectionInformationAsync(Long limit, Long offset, final ApiCallback<CountriesGetCollectionInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionInformationValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CountriesGetCollectionInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollectionInformationRequestBuilder {
        private Long limit;
        private Long offset;

        private GetCollectionInformationRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetCollectionInformationRequestBuilder
         */
        public GetCollectionInformationRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetCollectionInformationRequestBuilder
         */
        public GetCollectionInformationRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getCollectionInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollectionInformationCall(limit, offset, _callback);
        }


        /**
         * Execute getCollectionInformation request
         * @return CountriesGetCollectionInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CountriesGetCollectionInformationResponse execute() throws ApiException {
            ApiResponse<CountriesGetCollectionInformationResponse> localVarResp = getCollectionInformationWithHttpInfo(limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollectionInformation request with HTTP info returned
         * @return ApiResponse&lt;CountriesGetCollectionInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountriesGetCollectionInformationResponse> executeWithHttpInfo() throws ApiException {
            return getCollectionInformationWithHttpInfo(limit, offset);
        }

        /**
         * Execute getCollectionInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountriesGetCollectionInformationResponse> _callback) throws ApiException {
            return getCollectionInformationAsync(limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of information about countries.
     * Retrieves a collection of information about countries, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
     * @return GetCollectionInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetCollectionInformationRequestBuilder getCollectionInformation() throws IllegalArgumentException {
        return new GetCollectionInformationRequestBuilder();
    }
    private okhttp3.Call getInfoCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getInfo(Async)");
        }

        return getInfoCall(ID, _callback);

    }


    private ApiResponse<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a> getInfoWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String ID, final ApiCallback<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String ID;

        private GetInfoRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(ID, _callback);
        }


        /**
         * Execute getInfo request
         * @return PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a execute() throws ApiException {
            ApiResponse<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a> localVarResp = getInfoWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(ID);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonCountryViewDefinitionF206795ea40e1000040cc6f5da4f002a> _callback) throws ApiException {
            return getInfoAsync(ID, _callback);
        }
    }

    /**
     * Retrieves information about a country.
     * Retrieves information about a country, including their alpha codes, and whether or not they are enabled for address lookup.  Secured by: REST API Public
     * @param ID The Workday ID of the resource. (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInfoRequestBuilder getInfo(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetInfoRequestBuilder(ID);
    }
    private okhttp3.Call getNameComponentsCall(String ID, String currentName, Long limit, String nameConfigurationFormat, Long offset, Boolean useWesternScript, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/countries/{ID}/nameComponents"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentName", currentName));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (nameConfigurationFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameConfigurationFormat", nameConfigurationFormat));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (useWesternScript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useWesternScript", useWesternScript));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNameComponentsValidateBeforeCall(String ID, String currentName, Long limit, String nameConfigurationFormat, Long offset, Boolean useWesternScript, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getNameComponents(Async)");
        }

        return getNameComponentsCall(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript, _callback);

    }


    private ApiResponse<CountriesGetNameComponentsResponse> getNameComponentsWithHttpInfo(String ID, String currentName, Long limit, String nameConfigurationFormat, Long offset, Boolean useWesternScript) throws ApiException {
        okhttp3.Call localVarCall = getNameComponentsValidateBeforeCall(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript, null);
        Type localVarReturnType = new TypeToken<CountriesGetNameComponentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNameComponentsAsync(String ID, String currentName, Long limit, String nameConfigurationFormat, Long offset, Boolean useWesternScript, final ApiCallback<CountriesGetNameComponentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNameComponentsValidateBeforeCall(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript, _callback);
        Type localVarReturnType = new TypeToken<CountriesGetNameComponentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNameComponentsRequestBuilder {
        private final String ID;
        private String currentName;
        private Long limit;
        private String nameConfigurationFormat;
        private Long offset;
        private Boolean useWesternScript;

        private GetNameComponentsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set currentName
         * @param currentName The Workday ID of the person&#39;s current name being updated.  Required when you use Default Format and a Country using Local Script to get component data for an existing name. Failure to provide this when appropriate may result in incorrect name component data being returned. (optional)
         * @return GetNameComponentsRequestBuilder
         */
        public GetNameComponentsRequestBuilder currentName(String currentName) {
            this.currentName = currentName;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetNameComponentsRequestBuilder
         */
        public GetNameComponentsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set nameConfigurationFormat
         * @param nameConfigurationFormat The Name Configuration Format for which to return values.  Required. Failure to provide this will result in no name components being returned. Available values are: - RECRUITING_FORMAT - The name components specific to Recruiting. - OTHER_FUNCTIONAL_AREAS - The name components for all other functional areas in Workday. Example: nameConfigurationFormat&#x3D;Name_Configuration_Format_ID&#x3D;OTHER_FUNCTIONAL_AREAS (optional)
         * @return GetNameComponentsRequestBuilder
         */
        public GetNameComponentsRequestBuilder nameConfigurationFormat(String nameConfigurationFormat) {
            this.nameConfigurationFormat = nameConfigurationFormat;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetNameComponentsRequestBuilder
         */
        public GetNameComponentsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set useWesternScript
         * @param useWesternScript If true, this method returns the set of allowed and required name components that uses Western Script.  The default is false. (optional)
         * @return GetNameComponentsRequestBuilder
         */
        public GetNameComponentsRequestBuilder useWesternScript(Boolean useWesternScript) {
            this.useWesternScript = useWesternScript;
            return this;
        }
        
        /**
         * Build call for getNameComponents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNameComponentsCall(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript, _callback);
        }


        /**
         * Execute getNameComponents request
         * @return CountriesGetNameComponentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public CountriesGetNameComponentsResponse execute() throws ApiException {
            ApiResponse<CountriesGetNameComponentsResponse> localVarResp = getNameComponentsWithHttpInfo(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNameComponents request with HTTP info returned
         * @return ApiResponse&lt;CountriesGetNameComponentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountriesGetNameComponentsResponse> executeWithHttpInfo() throws ApiException {
            return getNameComponentsWithHttpInfo(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript);
        }

        /**
         * Execute getNameComponents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountriesGetNameComponentsResponse> _callback) throws ApiException {
            return getNameComponentsAsync(ID, currentName, limit, nameConfigurationFormat, offset, useWesternScript, _callback);
        }
    }

    /**
     * Retrieves a collection of configuration information about name components.
     * Retrieves a collection of configuration information about name components. The Maintain Name Components by Country task enables administrators to configure the allowed and required name components for a country.   You must specify the required nameConfigurationFormat query parameter.  Secured by: REST API Public
     * @param ID The Workday ID of the resource. (required)
     * @return GetNameComponentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetNameComponentsRequestBuilder getNameComponents(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetNameComponentsRequestBuilder(ID);
    }
}
