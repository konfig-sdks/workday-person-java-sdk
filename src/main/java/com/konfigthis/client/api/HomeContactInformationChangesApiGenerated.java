/*
 * person
 * The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessProcessParameters83f6f6b7c38d100009c7ad91dd414a16;
import com.konfigthis.client.model.ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed;
import com.konfigthis.client.model.Country81f66ab16f7510005c53d8fd5f5b4852;
import com.konfigthis.client.model.CountryCity81f66ab16f7510005c53d89089074844;
import com.konfigthis.client.model.CountryPhoneCode1089da0ab90910000f7089365467088c;
import com.konfigthis.client.model.CountryRegion81f66ab16f7510005c53d8be2fe44847;
import com.konfigthis.client.model.DeviceType1089da0ab90910000f7089256c7b0888;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.EmailAddressReference0918d433e86b100018119edc1b8f00f7;
import com.konfigthis.client.model.HomeAddressReference81f66ab16f7510005c53d881876e4843;
import com.konfigthis.client.model.HomeContactInformationChangesGetAddressesStagedResponse;
import com.konfigthis.client.model.HomeContactInformationChangesGetPhoneNumbersResponse;
import com.konfigthis.client.model.HomeContactInformationChangesGetStagedEmailAddressesResponse;
import com.konfigthis.client.model.HomeContactInformationChangesGetStagedInstantMessengersResponse;
import com.konfigthis.client.model.HomeContactInformationChangesGetWebAddressesStagedResponse;
import com.konfigthis.client.model.InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016;
import java.time.LocalDate;
import com.konfigthis.client.model.PhoneReference1089da0ab90910000f70891a998b0887;
import com.konfigthis.client.model.TypeDe08a6c876a810000cb2e3dd8853001a;
import com.konfigthis.client.model.Usage1089da0ab90910000f70892f2de3088a;
import com.konfigthis.client.model.Usage6333dee5ac2010000c8653405aaa0038;
import com.konfigthis.client.model.Usage81f66ab16f7510005c53d917926f4857;
import com.konfigthis.client.model.UsageDe08a6c876a810000cb2e3d738be0019;
import com.konfigthis.client.model.UsageE357ae6d466510000ce25a08bfe401b3;
import com.konfigthis.client.model.WebAddressReferenceE357ae6d466510000ce259f323be01b0;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HomeContactInformationChangesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HomeContactInformationChangesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HomeContactInformationChangesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmailAddressCall(String ID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailAddressReference0918d433e86b100018119edc1b8f00f7;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/emailAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailAddressValidateBeforeCall(String ID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createEmailAddress(Async)");
        }

        // verify the required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' is set
        if (emailAddressReference0918d433e86b100018119edc1b8f00f7 == null) {
            throw new ApiException("Missing the required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' when calling createEmailAddress(Async)");
        }

        return createEmailAddressCall(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);

    }


    private ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> createEmailAddressWithHttpInfo(String ID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7) throws ApiException {
        okhttp3.Call localVarCall = createEmailAddressValidateBeforeCall(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7, null);
        Type localVarReturnType = new TypeToken<EmailAddressReference0918d433e86b100018119edc1b8f00f7>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailAddressAsync(String ID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7, final ApiCallback<EmailAddressReference0918d433e86b100018119edc1b8f00f7> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailAddressValidateBeforeCall(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);
        Type localVarReturnType = new TypeToken<EmailAddressReference0918d433e86b100018119edc1b8f00f7>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailAddressRequestBuilder {
        private final String ID;
        private String emailAddress;
        private Usage6333dee5ac2010000c8653405aaa0038 usage;
        private String descriptor;
        private String id;

        private CreateEmailAddressRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set emailAddress
         * @param emailAddress The email address. (optional)
         * @return CreateEmailAddressRequestBuilder
         */
        public CreateEmailAddressRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return CreateEmailAddressRequestBuilder
         */
        public CreateEmailAddressRequestBuilder usage(Usage6333dee5ac2010000c8653405aaa0038 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return CreateEmailAddressRequestBuilder
         */
        public CreateEmailAddressRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateEmailAddressRequestBuilder
         */
        public CreateEmailAddressRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            return createEmailAddressCall(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);
        }

        private EmailAddressReference0918d433e86b100018119edc1b8f00f7 buildBodyParams() {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = new EmailAddressReference0918d433e86b100018119edc1b8f00f7();
            return emailAddressReference0918d433e86b100018119edc1b8f00f7;
        }

        /**
         * Execute createEmailAddress request
         * @return EmailAddressReference0918d433e86b100018119edc1b8f00f7
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public EmailAddressReference0918d433e86b100018119edc1b8f00f7 execute() throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> localVarResp = createEmailAddressWithHttpInfo(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;EmailAddressReference0918d433e86b100018119edc1b8f00f7&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> executeWithHttpInfo() throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            return createEmailAddressWithHttpInfo(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7);
        }

        /**
         * Execute createEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailAddressReference0918d433e86b100018119edc1b8f00f7> _callback) throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            return createEmailAddressAsync(ID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);
        }
    }

    /**
     * 
     * Creates a new email address staged by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param emailAddressReference0918d433e86b100018119edc1b8f00f7  (required)
     * @return CreateEmailAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailAddressRequestBuilder createEmailAddress(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateEmailAddressRequestBuilder(ID);
    }
    private okhttp3.Call createInstantMessengerCall(String ID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/instantMessengers"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstantMessengerValidateBeforeCall(String ID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createInstantMessenger(Async)");
        }

        // verify the required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' is set
        if (instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 == null) {
            throw new ApiException("Missing the required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' when calling createInstantMessenger(Async)");
        }

        return createInstantMessengerCall(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);

    }


    private ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> createInstantMessengerWithHttpInfo(String ID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016) throws ApiException {
        okhttp3.Call localVarCall = createInstantMessengerValidateBeforeCall(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, null);
        Type localVarReturnType = new TypeToken<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInstantMessengerAsync(String ID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, final ApiCallback<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInstantMessengerValidateBeforeCall(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);
        Type localVarReturnType = new TypeToken<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInstantMessengerRequestBuilder {
        private final String ID;
        private TypeDe08a6c876a810000cb2e3dd8853001a type;
        private String userName;
        private UsageDe08a6c876a810000cb2e3d738be0019 usage;
        private String id;

        private CreateInstantMessengerRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return CreateInstantMessengerRequestBuilder
         */
        public CreateInstantMessengerRequestBuilder type(TypeDe08a6c876a810000cb2e3dd8853001a type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set userName
         * @param userName The instant messenger account username. (optional)
         * @return CreateInstantMessengerRequestBuilder
         */
        public CreateInstantMessengerRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return CreateInstantMessengerRequestBuilder
         */
        public CreateInstantMessengerRequestBuilder usage(UsageDe08a6c876a810000cb2e3d738be0019 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateInstantMessengerRequestBuilder
         */
        public CreateInstantMessengerRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createInstantMessenger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            return createInstantMessengerCall(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);
        }

        private InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 buildBodyParams() {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = new InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016();
            return instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016;
        }

        /**
         * Execute createInstantMessenger request
         * @return InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 execute() throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> localVarResp = createInstantMessengerWithHttpInfo(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInstantMessenger request with HTTP info returned
         * @return ApiResponse&lt;InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> executeWithHttpInfo() throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            return createInstantMessengerWithHttpInfo(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016);
        }

        /**
         * Execute createInstantMessenger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> _callback) throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            return createInstantMessengerAsync(ID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);
        }
    }

    /**
     * 
     * Creates a new instant messenger staged by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016  (required)
     * @return CreateInstantMessengerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateInstantMessengerRequestBuilder createInstantMessenger(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateInstantMessengerRequestBuilder(ID);
    }
    private okhttp3.Call createNewAddressCall(String ID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = homeAddressReference81f66ab16f7510005c53d881876e4843;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/addresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAddressValidateBeforeCall(String ID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createNewAddress(Async)");
        }

        // verify the required parameter 'homeAddressReference81f66ab16f7510005c53d881876e4843' is set
        if (homeAddressReference81f66ab16f7510005c53d881876e4843 == null) {
            throw new ApiException("Missing the required parameter 'homeAddressReference81f66ab16f7510005c53d881876e4843' when calling createNewAddress(Async)");
        }

        return createNewAddressCall(ID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);

    }


    private ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> createNewAddressWithHttpInfo(String ID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843) throws ApiException {
        okhttp3.Call localVarCall = createNewAddressValidateBeforeCall(ID, homeAddressReference81f66ab16f7510005c53d881876e4843, null);
        Type localVarReturnType = new TypeToken<HomeAddressReference81f66ab16f7510005c53d881876e4843>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAddressAsync(String ID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843, final ApiCallback<HomeAddressReference81f66ab16f7510005c53d881876e4843> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAddressValidateBeforeCall(ID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);
        Type localVarReturnType = new TypeToken<HomeAddressReference81f66ab16f7510005c53d881876e4843>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAddressRequestBuilder {
        private final String ID;
        private String citySubdivision2Local;
        private String addressLine9;
        private String citySubdivision1Local;
        private String addressLine8Local;
        private String addressLine6;
        private LocalDate effective;
        private String addressLine3;
        private String postalCode;
        private Integer numberDaysWFH;
        private String addressLine2Local;
        private String cityLocal;
        private String addressLine6Local;
        private String addressLine1;
        private String citySubdivision1;
        private String regionSubdivision2;
        private String city;
        private String addressLine4Local;
        private String regionSubdivision1;
        private String addressLine7;
        private String addressLine2;
        private String addressLine5;
        private String addressLine9Local;
        private String addressLine3Local;
        private CountryCity81f66ab16f7510005c53d89089074844 countryCity;
        private String addressLine7Local;
        private String addressLine1Local;
        private Country81f66ab16f7510005c53d8fd5f5b4852 country;
        private CountryRegion81f66ab16f7510005c53d8be2fe44847 countryRegion;
        private String addressLine5Local;
        private String regionSubdivision1Local;
        private String addressLine4;
        private Usage81f66ab16f7510005c53d917926f4857 usage;
        private String addressLine8;
        private String citySubdivision2;
        private String id;

        private CreateNewAddressRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set citySubdivision2Local
         * @param citySubdivision2Local City Subdivision 2 - Local (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder citySubdivision2Local(String citySubdivision2Local) {
            this.citySubdivision2Local = citySubdivision2Local;
            return this;
        }
        
        /**
         * Set addressLine9
         * @param addressLine9 Address Line 9 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine9(String addressLine9) {
            this.addressLine9 = addressLine9;
            return this;
        }
        
        /**
         * Set citySubdivision1Local
         * @param citySubdivision1Local City Subdivision 1 - Local (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder citySubdivision1Local(String citySubdivision1Local) {
            this.citySubdivision1Local = citySubdivision1Local;
            return this;
        }
        
        /**
         * Set addressLine8Local
         * @param addressLine8Local Local Address Line 8 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine8Local(String addressLine8Local) {
            this.addressLine8Local = addressLine8Local;
            return this;
        }
        
        /**
         * Set addressLine6
         * @param addressLine6 Address Line 6 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine6(String addressLine6) {
            this.addressLine6 = addressLine6;
            return this;
        }
        
        /**
         * Set effective
         * @param effective The date this business process takes effect. (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder effective(LocalDate effective) {
            this.effective = effective;
            return this;
        }
        
        /**
         * Set addressLine3
         * @param addressLine3 Address Line 3 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine3(String addressLine3) {
            this.addressLine3 = addressLine3;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode Postal Code (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set numberDaysWFH
         * @param numberDaysWFH Number of Days WFH (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder numberDaysWFH(Integer numberDaysWFH) {
            this.numberDaysWFH = numberDaysWFH;
            return this;
        }
        
        /**
         * Set addressLine2Local
         * @param addressLine2Local Local Address Line 2 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine2Local(String addressLine2Local) {
            this.addressLine2Local = addressLine2Local;
            return this;
        }
        
        /**
         * Set cityLocal
         * @param cityLocal City - Local (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder cityLocal(String cityLocal) {
            this.cityLocal = cityLocal;
            return this;
        }
        
        /**
         * Set addressLine6Local
         * @param addressLine6Local Local Address Line 6 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine6Local(String addressLine6Local) {
            this.addressLine6Local = addressLine6Local;
            return this;
        }
        
        /**
         * Set addressLine1
         * @param addressLine1 Address Line 1 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine1(String addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }
        
        /**
         * Set citySubdivision1
         * @param citySubdivision1 City Subdivision 1 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder citySubdivision1(String citySubdivision1) {
            this.citySubdivision1 = citySubdivision1;
            return this;
        }
        
        /**
         * Set regionSubdivision2
         * @param regionSubdivision2 Region Subdivision 2 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder regionSubdivision2(String regionSubdivision2) {
            this.regionSubdivision2 = regionSubdivision2;
            return this;
        }
        
        /**
         * Set city
         * @param city City (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set addressLine4Local
         * @param addressLine4Local Local Address Line 4 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine4Local(String addressLine4Local) {
            this.addressLine4Local = addressLine4Local;
            return this;
        }
        
        /**
         * Set regionSubdivision1
         * @param regionSubdivision1 Region Subdivision 1 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder regionSubdivision1(String regionSubdivision1) {
            this.regionSubdivision1 = regionSubdivision1;
            return this;
        }
        
        /**
         * Set addressLine7
         * @param addressLine7 Address Line 7 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine7(String addressLine7) {
            this.addressLine7 = addressLine7;
            return this;
        }
        
        /**
         * Set addressLine2
         * @param addressLine2 Address Line 2 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine2(String addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        
        /**
         * Set addressLine5
         * @param addressLine5 Address Line 5 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine5(String addressLine5) {
            this.addressLine5 = addressLine5;
            return this;
        }
        
        /**
         * Set addressLine9Local
         * @param addressLine9Local Local Address Line 9 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine9Local(String addressLine9Local) {
            this.addressLine9Local = addressLine9Local;
            return this;
        }
        
        /**
         * Set addressLine3Local
         * @param addressLine3Local Local Address Line 3 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine3Local(String addressLine3Local) {
            this.addressLine3Local = addressLine3Local;
            return this;
        }
        
        /**
         * Set countryCity
         * @param countryCity  (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder countryCity(CountryCity81f66ab16f7510005c53d89089074844 countryCity) {
            this.countryCity = countryCity;
            return this;
        }
        
        /**
         * Set addressLine7Local
         * @param addressLine7Local Local Address Line 7 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine7Local(String addressLine7Local) {
            this.addressLine7Local = addressLine7Local;
            return this;
        }
        
        /**
         * Set addressLine1Local
         * @param addressLine1Local Local Address Line 1 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine1Local(String addressLine1Local) {
            this.addressLine1Local = addressLine1Local;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder country(Country81f66ab16f7510005c53d8fd5f5b4852 country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set countryRegion
         * @param countryRegion  (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder countryRegion(CountryRegion81f66ab16f7510005c53d8be2fe44847 countryRegion) {
            this.countryRegion = countryRegion;
            return this;
        }
        
        /**
         * Set addressLine5Local
         * @param addressLine5Local Local Address Line 5 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine5Local(String addressLine5Local) {
            this.addressLine5Local = addressLine5Local;
            return this;
        }
        
        /**
         * Set regionSubdivision1Local
         * @param regionSubdivision1Local Region Subdivision 1 - Local (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder regionSubdivision1Local(String regionSubdivision1Local) {
            this.regionSubdivision1Local = regionSubdivision1Local;
            return this;
        }
        
        /**
         * Set addressLine4
         * @param addressLine4 Address Line 4 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine4(String addressLine4) {
            this.addressLine4 = addressLine4;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder usage(Usage81f66ab16f7510005c53d917926f4857 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set addressLine8
         * @param addressLine8 Address Line 8 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder addressLine8(String addressLine8) {
            this.addressLine8 = addressLine8;
            return this;
        }
        
        /**
         * Set citySubdivision2
         * @param citySubdivision2 City Subdivision 2 (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder citySubdivision2(String citySubdivision2) {
            this.citySubdivision2 = citySubdivision2;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateNewAddressRequestBuilder
         */
        public CreateNewAddressRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createNewAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            return createNewAddressCall(ID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);
        }

        private HomeAddressReference81f66ab16f7510005c53d881876e4843 buildBodyParams() {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = new HomeAddressReference81f66ab16f7510005c53d881876e4843();
            return homeAddressReference81f66ab16f7510005c53d881876e4843;
        }

        /**
         * Execute createNewAddress request
         * @return HomeAddressReference81f66ab16f7510005c53d881876e4843
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeAddressReference81f66ab16f7510005c53d881876e4843 execute() throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> localVarResp = createNewAddressWithHttpInfo(ID, homeAddressReference81f66ab16f7510005c53d881876e4843);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAddress request with HTTP info returned
         * @return ApiResponse&lt;HomeAddressReference81f66ab16f7510005c53d881876e4843&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> executeWithHttpInfo() throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            return createNewAddressWithHttpInfo(ID, homeAddressReference81f66ab16f7510005c53d881876e4843);
        }

        /**
         * Execute createNewAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeAddressReference81f66ab16f7510005c53d881876e4843> _callback) throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            return createNewAddressAsync(ID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);
        }
    }

    /**
     * 
     * Creates a new address staged by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param homeAddressReference81f66ab16f7510005c53d881876e4843  (required)
     * @return CreateNewAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAddressRequestBuilder createNewAddress(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateNewAddressRequestBuilder(ID);
    }
    private okhttp3.Call createPhoneNumberCall(String ID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneReference1089da0ab90910000f70891a998b0887;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/phoneNumbers"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPhoneNumberValidateBeforeCall(String ID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createPhoneNumber(Async)");
        }

        // verify the required parameter 'phoneReference1089da0ab90910000f70891a998b0887' is set
        if (phoneReference1089da0ab90910000f70891a998b0887 == null) {
            throw new ApiException("Missing the required parameter 'phoneReference1089da0ab90910000f70891a998b0887' when calling createPhoneNumber(Async)");
        }

        return createPhoneNumberCall(ID, phoneReference1089da0ab90910000f70891a998b0887, _callback);

    }


    private ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> createPhoneNumberWithHttpInfo(String ID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887) throws ApiException {
        okhttp3.Call localVarCall = createPhoneNumberValidateBeforeCall(ID, phoneReference1089da0ab90910000f70891a998b0887, null);
        Type localVarReturnType = new TypeToken<PhoneReference1089da0ab90910000f70891a998b0887>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPhoneNumberAsync(String ID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887, final ApiCallback<PhoneReference1089da0ab90910000f70891a998b0887> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPhoneNumberValidateBeforeCall(ID, phoneReference1089da0ab90910000f70891a998b0887, _callback);
        Type localVarReturnType = new TypeToken<PhoneReference1089da0ab90910000f70891a998b0887>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePhoneNumberRequestBuilder {
        private final String ID;
        private String extension;
        private String completePhoneNumber;
        private CountryPhoneCode1089da0ab90910000f7089365467088c countryPhoneCode;
        private DeviceType1089da0ab90910000f7089256c7b0888 deviceType;
        private Usage1089da0ab90910000f70892f2de3088a usage;
        private String descriptor;
        private String id;

        private CreatePhoneNumberRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set extension
         * @param extension The phone extension. (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder extension(String extension) {
            this.extension = extension;
            return this;
        }
        
        /**
         * Set completePhoneNumber
         * @param completePhoneNumber The complete phone number. (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder completePhoneNumber(String completePhoneNumber) {
            this.completePhoneNumber = completePhoneNumber;
            return this;
        }
        
        /**
         * Set countryPhoneCode
         * @param countryPhoneCode  (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder countryPhoneCode(CountryPhoneCode1089da0ab90910000f7089365467088c countryPhoneCode) {
            this.countryPhoneCode = countryPhoneCode;
            return this;
        }
        
        /**
         * Set deviceType
         * @param deviceType  (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder deviceType(DeviceType1089da0ab90910000f7089256c7b0888 deviceType) {
            this.deviceType = deviceType;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder usage(Usage1089da0ab90910000f70892f2de3088a usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreatePhoneNumberRequestBuilder
         */
        public CreatePhoneNumberRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            return createPhoneNumberCall(ID, phoneReference1089da0ab90910000f70891a998b0887, _callback);
        }

        private PhoneReference1089da0ab90910000f70891a998b0887 buildBodyParams() {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = new PhoneReference1089da0ab90910000f70891a998b0887();
            return phoneReference1089da0ab90910000f70891a998b0887;
        }

        /**
         * Execute createPhoneNumber request
         * @return PhoneReference1089da0ab90910000f70891a998b0887
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneReference1089da0ab90910000f70891a998b0887 execute() throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> localVarResp = createPhoneNumberWithHttpInfo(ID, phoneReference1089da0ab90910000f70891a998b0887);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneReference1089da0ab90910000f70891a998b0887&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> executeWithHttpInfo() throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            return createPhoneNumberWithHttpInfo(ID, phoneReference1089da0ab90910000f70891a998b0887);
        }

        /**
         * Execute createPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneReference1089da0ab90910000f70891a998b0887> _callback) throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            return createPhoneNumberAsync(ID, phoneReference1089da0ab90910000f70891a998b0887, _callback);
        }
    }

    /**
     * 
     * Creates a new phone number staged by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param phoneReference1089da0ab90910000f70891a998b0887  (required)
     * @return CreatePhoneNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePhoneNumberRequestBuilder createPhoneNumber(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreatePhoneNumberRequestBuilder(ID);
    }
    private okhttp3.Call createWebAddressCall(String ID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webAddressReferenceE357ae6d466510000ce259f323be01b0;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/webAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebAddressValidateBeforeCall(String ID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling createWebAddress(Async)");
        }

        // verify the required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' is set
        if (webAddressReferenceE357ae6d466510000ce259f323be01b0 == null) {
            throw new ApiException("Missing the required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' when calling createWebAddress(Async)");
        }

        return createWebAddressCall(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);

    }


    private ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> createWebAddressWithHttpInfo(String ID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0) throws ApiException {
        okhttp3.Call localVarCall = createWebAddressValidateBeforeCall(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0, null);
        Type localVarReturnType = new TypeToken<WebAddressReferenceE357ae6d466510000ce259f323be01b0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebAddressAsync(String ID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0, final ApiCallback<WebAddressReferenceE357ae6d466510000ce259f323be01b0> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebAddressValidateBeforeCall(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);
        Type localVarReturnType = new TypeToken<WebAddressReferenceE357ae6d466510000ce259f323be01b0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebAddressRequestBuilder {
        private final String ID;
        private UsageE357ae6d466510000ce25a08bfe401b3 usage;
        private String url;
        private String id;

        private CreateWebAddressRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set usage
         * @param usage  (optional)
         * @return CreateWebAddressRequestBuilder
         */
        public CreateWebAddressRequestBuilder usage(UsageE357ae6d466510000ce25a08bfe401b3 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set url
         * @param url The complete URL address for the web address. (optional)
         * @return CreateWebAddressRequestBuilder
         */
        public CreateWebAddressRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return CreateWebAddressRequestBuilder
         */
        public CreateWebAddressRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for createWebAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            return createWebAddressCall(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);
        }

        private WebAddressReferenceE357ae6d466510000ce259f323be01b0 buildBodyParams() {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = new WebAddressReferenceE357ae6d466510000ce259f323be01b0();
            return webAddressReferenceE357ae6d466510000ce259f323be01b0;
        }

        /**
         * Execute createWebAddress request
         * @return WebAddressReferenceE357ae6d466510000ce259f323be01b0
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WebAddressReferenceE357ae6d466510000ce259f323be01b0 execute() throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> localVarResp = createWebAddressWithHttpInfo(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebAddress request with HTTP info returned
         * @return ApiResponse&lt;WebAddressReferenceE357ae6d466510000ce259f323be01b0&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> executeWithHttpInfo() throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            return createWebAddressWithHttpInfo(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0);
        }

        /**
         * Execute createWebAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebAddressReferenceE357ae6d466510000ce259f323be01b0> _callback) throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            return createWebAddressAsync(ID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);
        }
    }

    /**
     * 
     * Creates a new web address staged by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param webAddressReferenceE357ae6d466510000ce259f323be01b0  (required)
     * @return CreateWebAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebAddressRequestBuilder createWebAddress(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new CreateWebAddressRequestBuilder(ID);
    }
    private okhttp3.Call getAddressAsStagedCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/addresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressAsStagedValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAddressAsStaged(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getAddressAsStaged(Async)");
        }

        return getAddressAsStagedCall(ID, subresourceID, _callback);

    }


    private ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> getAddressAsStagedWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getAddressAsStagedValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<HomeAddressReference81f66ab16f7510005c53d881876e4843>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAddressAsStagedAsync(String ID, String subresourceID, final ApiCallback<HomeAddressReference81f66ab16f7510005c53d881876e4843> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressAsStagedValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<HomeAddressReference81f66ab16f7510005c53d881876e4843>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAddressAsStagedRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetAddressAsStagedRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getAddressAsStaged
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAddressAsStagedCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getAddressAsStaged request
         * @return HomeAddressReference81f66ab16f7510005c53d881876e4843
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeAddressReference81f66ab16f7510005c53d881876e4843 execute() throws ApiException {
            ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> localVarResp = getAddressAsStagedWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAddressAsStaged request with HTTP info returned
         * @return ApiResponse&lt;HomeAddressReference81f66ab16f7510005c53d881876e4843&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> executeWithHttpInfo() throws ApiException {
            return getAddressAsStagedWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getAddressAsStaged request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeAddressReference81f66ab16f7510005c53d881876e4843> _callback) throws ApiException {
            return getAddressAsStagedAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * An address as it exists staged for update by the parent business process.
     * Retrieve an existing address as it exists when staged by the parent business process.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetAddressAsStagedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressAsStagedRequestBuilder getAddressAsStaged(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetAddressAsStagedRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getAddressesStagedCall(String ID, Long limit, Long offset, Boolean primaryOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/addresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressesStagedValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAddressesStaged(Async)");
        }

        return getAddressesStagedCall(ID, limit, offset, primaryOnly, usedFor, _callback);

    }


    private ApiResponse<HomeContactInformationChangesGetAddressesStagedResponse> getAddressesStagedWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getAddressesStagedValidateBeforeCall(ID, limit, offset, primaryOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetAddressesStagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAddressesStagedAsync(String ID, Long limit, Long offset, Boolean primaryOnly, String usedFor, final ApiCallback<HomeContactInformationChangesGetAddressesStagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAddressesStagedValidateBeforeCall(ID, limit, offset, primaryOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetAddressesStagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAddressesStagedRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private String usedFor;

        private GetAddressesStagedRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetAddressesStagedRequestBuilder
         */
        public GetAddressesStagedRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAddressesStagedRequestBuilder
         */
        public GetAddressesStagedRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly  (optional)
         * @return GetAddressesStagedRequestBuilder
         */
        public GetAddressesStagedRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor  (optional)
         * @return GetAddressesStagedRequestBuilder
         */
        public GetAddressesStagedRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getAddressesStaged
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAddressesStagedCall(ID, limit, offset, primaryOnly, usedFor, _callback);
        }


        /**
         * Execute getAddressesStaged request
         * @return HomeContactInformationChangesGetAddressesStagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactInformationChangesGetAddressesStagedResponse execute() throws ApiException {
            ApiResponse<HomeContactInformationChangesGetAddressesStagedResponse> localVarResp = getAddressesStagedWithHttpInfo(ID, limit, offset, primaryOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAddressesStaged request with HTTP info returned
         * @return ApiResponse&lt;HomeContactInformationChangesGetAddressesStagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactInformationChangesGetAddressesStagedResponse> executeWithHttpInfo() throws ApiException {
            return getAddressesStagedWithHttpInfo(ID, limit, offset, primaryOnly, usedFor);
        }

        /**
         * Execute getAddressesStaged request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactInformationChangesGetAddressesStagedResponse> _callback) throws ApiException {
            return getAddressesStagedAsync(ID, limit, offset, primaryOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieve all existing addresses staged for update by the parent business process
     * Retrieve all addresses staged for update by the parent business process  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetAddressesStagedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAddressesStagedRequestBuilder getAddressesStaged(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetAddressesStagedRequestBuilder(ID);
    }
    private okhttp3.Call getEmailAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getEmailAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getEmailAddress(Async)");
        }

        return getEmailAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> getEmailAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getEmailAddressValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<EmailAddressReference0918d433e86b100018119edc1b8f00f7>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailAddressAsync(String ID, String subresourceID, final ApiCallback<EmailAddressReference0918d433e86b100018119edc1b8f00f7> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailAddressValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<EmailAddressReference0918d433e86b100018119edc1b8f00f7>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetEmailAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getEmailAddress request
         * @return EmailAddressReference0918d433e86b100018119edc1b8f00f7
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public EmailAddressReference0918d433e86b100018119edc1b8f00f7 execute() throws ApiException {
            ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> localVarResp = getEmailAddressWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;EmailAddressReference0918d433e86b100018119edc1b8f00f7&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> executeWithHttpInfo() throws ApiException {
            return getEmailAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailAddressReference0918d433e86b100018119edc1b8f00f7> _callback) throws ApiException {
            return getEmailAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * An email address as it exists staged for update by the parent business process.
     * Retrieve an existing email address as it exists when staged by the parent business process.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetEmailAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailAddressRequestBuilder getEmailAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetEmailAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getEventInformationCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventInformationValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getEventInformation(Async)");
        }

        return getEventInformationCall(ID, _callback);

    }


    private ApiResponse<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> getEventInformationWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getEventInformationValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventInformationAsync(String ID, final ApiCallback<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventInformationValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventInformationRequestBuilder {
        private final String ID;

        private GetEventInformationRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getEventInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventInformationCall(ID, _callback);
        }


        /**
         * Execute getEventInformation request
         * @return ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed execute() throws ApiException {
            ApiResponse<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> localVarResp = getEventInformationWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventInformation request with HTTP info returned
         * @return ApiResponse&lt;ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> executeWithHttpInfo() throws ApiException {
            return getEventInformationWithHttpInfo(ID);
        }

        /**
         * Execute getEventInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> _callback) throws ApiException {
            return getEventInformationAsync(ID, _callback);
        }
    }

    /**
     * 
     * Returns basic information about the home contact change event.  Secured by: Change Home Contact Information (REST Service), Person Data: Home Contact Information, Self-Service: Home Contact Information  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetEventInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetEventInformationRequestBuilder getEventInformation(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetEventInformationRequestBuilder(ID);
    }
    private okhttp3.Call getInstantMessengerCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstantMessengerValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getInstantMessenger(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getInstantMessenger(Async)");
        }

        return getInstantMessengerCall(ID, subresourceID, _callback);

    }


    private ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> getInstantMessengerWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getInstantMessengerValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstantMessengerAsync(String ID, String subresourceID, final ApiCallback<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstantMessengerValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstantMessengerRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetInstantMessengerRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getInstantMessenger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstantMessengerCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getInstantMessenger request
         * @return InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 execute() throws ApiException {
            ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> localVarResp = getInstantMessengerWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstantMessenger request with HTTP info returned
         * @return ApiResponse&lt;InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> executeWithHttpInfo() throws ApiException {
            return getInstantMessengerWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getInstantMessenger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> _callback) throws ApiException {
            return getInstantMessengerAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * An instant messenger as it exists staged for update by the parent business process.
     * Retrieve an existing instant messenger as it exists when staged by the parent business process.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetInstantMessengerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetInstantMessengerRequestBuilder getInstantMessenger(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetInstantMessengerRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getPhoneNumbersCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/phoneNumbers"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usageType", usageType));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumbersValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPhoneNumbers(Async)");
        }

        return getPhoneNumbersCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);

    }


    private ApiResponse<HomeContactInformationChangesGetPhoneNumbersResponse> getPhoneNumbersWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumbersValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, null);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetPhoneNumbersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneNumbersAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback<HomeContactInformationChangesGetPhoneNumbersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumbersValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetPhoneNumbersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhoneNumbersRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usageType;
        private String usedFor;

        private GetPhoneNumbersRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPhoneNumbersRequestBuilder
         */
        public GetPhoneNumbersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPhoneNumbersRequestBuilder
         */
        public GetPhoneNumbersRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary phone numbers. (optional)
         * @return GetPhoneNumbersRequestBuilder
         */
        public GetPhoneNumbersRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public phone numbers. (optional)
         * @return GetPhoneNumbersRequestBuilder
         */
        public GetPhoneNumbersRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usageType
         * @param usageType Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint. (optional)
         * @return GetPhoneNumbersRequestBuilder
         */
        public GetPhoneNumbersRequestBuilder usageType(String usageType) {
            this.usageType = usageType;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetPhoneNumbersRequestBuilder
         */
        public GetPhoneNumbersRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getPhoneNumbers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneNumbersCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }


        /**
         * Execute getPhoneNumbers request
         * @return HomeContactInformationChangesGetPhoneNumbersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactInformationChangesGetPhoneNumbersResponse execute() throws ApiException {
            ApiResponse<HomeContactInformationChangesGetPhoneNumbersResponse> localVarResp = getPhoneNumbersWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhoneNumbers request with HTTP info returned
         * @return ApiResponse&lt;HomeContactInformationChangesGetPhoneNumbersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactInformationChangesGetPhoneNumbersResponse> executeWithHttpInfo() throws ApiException {
            return getPhoneNumbersWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
        }

        /**
         * Execute getPhoneNumbers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactInformationChangesGetPhoneNumbersResponse> _callback) throws ApiException {
            return getPhoneNumbersAsync(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }
    }

    /**
     * Retrieve all existing phone numbers staged for update by the parent business process
     * Retrieve all phone numbers staged for update by the parent business process  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetPhoneNumbersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPhoneNumbersRequestBuilder getPhoneNumbers(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetPhoneNumbersRequestBuilder(ID);
    }
    private okhttp3.Call getStagedEmailAddressesCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/emailAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usageType", usageType));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStagedEmailAddressesValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStagedEmailAddresses(Async)");
        }

        return getStagedEmailAddressesCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);

    }


    private ApiResponse<HomeContactInformationChangesGetStagedEmailAddressesResponse> getStagedEmailAddressesWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getStagedEmailAddressesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, null);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetStagedEmailAddressesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStagedEmailAddressesAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback<HomeContactInformationChangesGetStagedEmailAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStagedEmailAddressesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetStagedEmailAddressesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStagedEmailAddressesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usageType;
        private String usedFor;

        private GetStagedEmailAddressesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetStagedEmailAddressesRequestBuilder
         */
        public GetStagedEmailAddressesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetStagedEmailAddressesRequestBuilder
         */
        public GetStagedEmailAddressesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary email addresses. (optional)
         * @return GetStagedEmailAddressesRequestBuilder
         */
        public GetStagedEmailAddressesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public email addresses. (optional)
         * @return GetStagedEmailAddressesRequestBuilder
         */
        public GetStagedEmailAddressesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usageType
         * @param usageType Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint. (optional)
         * @return GetStagedEmailAddressesRequestBuilder
         */
        public GetStagedEmailAddressesRequestBuilder usageType(String usageType) {
            this.usageType = usageType;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetStagedEmailAddressesRequestBuilder
         */
        public GetStagedEmailAddressesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getStagedEmailAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStagedEmailAddressesCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }


        /**
         * Execute getStagedEmailAddresses request
         * @return HomeContactInformationChangesGetStagedEmailAddressesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactInformationChangesGetStagedEmailAddressesResponse execute() throws ApiException {
            ApiResponse<HomeContactInformationChangesGetStagedEmailAddressesResponse> localVarResp = getStagedEmailAddressesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStagedEmailAddresses request with HTTP info returned
         * @return ApiResponse&lt;HomeContactInformationChangesGetStagedEmailAddressesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactInformationChangesGetStagedEmailAddressesResponse> executeWithHttpInfo() throws ApiException {
            return getStagedEmailAddressesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
        }

        /**
         * Execute getStagedEmailAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactInformationChangesGetStagedEmailAddressesResponse> _callback) throws ApiException {
            return getStagedEmailAddressesAsync(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }
    }

    /**
     * Retrieve all existing addresses staged for update by the parent business process
     * Retrieve all email addresses staged for update by the parent business process  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetStagedEmailAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStagedEmailAddressesRequestBuilder getStagedEmailAddresses(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetStagedEmailAddressesRequestBuilder(ID);
    }
    private okhttp3.Call getStagedInstantMessengersCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/instantMessengers"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usageType", usageType));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStagedInstantMessengersValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStagedInstantMessengers(Async)");
        }

        return getStagedInstantMessengersCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);

    }


    private ApiResponse<HomeContactInformationChangesGetStagedInstantMessengersResponse> getStagedInstantMessengersWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getStagedInstantMessengersValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, null);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetStagedInstantMessengersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStagedInstantMessengersAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback<HomeContactInformationChangesGetStagedInstantMessengersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStagedInstantMessengersValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetStagedInstantMessengersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStagedInstantMessengersRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usageType;
        private String usedFor;

        private GetStagedInstantMessengersRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetStagedInstantMessengersRequestBuilder
         */
        public GetStagedInstantMessengersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetStagedInstantMessengersRequestBuilder
         */
        public GetStagedInstantMessengersRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary instant messenger account usernames. (optional)
         * @return GetStagedInstantMessengersRequestBuilder
         */
        public GetStagedInstantMessengersRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public instant messenger account usernames. (optional)
         * @return GetStagedInstantMessengersRequestBuilder
         */
        public GetStagedInstantMessengersRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usageType
         * @param usageType Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint. (optional)
         * @return GetStagedInstantMessengersRequestBuilder
         */
        public GetStagedInstantMessengersRequestBuilder usageType(String usageType) {
            this.usageType = usageType;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetStagedInstantMessengersRequestBuilder
         */
        public GetStagedInstantMessengersRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getStagedInstantMessengers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStagedInstantMessengersCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }


        /**
         * Execute getStagedInstantMessengers request
         * @return HomeContactInformationChangesGetStagedInstantMessengersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactInformationChangesGetStagedInstantMessengersResponse execute() throws ApiException {
            ApiResponse<HomeContactInformationChangesGetStagedInstantMessengersResponse> localVarResp = getStagedInstantMessengersWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStagedInstantMessengers request with HTTP info returned
         * @return ApiResponse&lt;HomeContactInformationChangesGetStagedInstantMessengersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactInformationChangesGetStagedInstantMessengersResponse> executeWithHttpInfo() throws ApiException {
            return getStagedInstantMessengersWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
        }

        /**
         * Execute getStagedInstantMessengers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactInformationChangesGetStagedInstantMessengersResponse> _callback) throws ApiException {
            return getStagedInstantMessengersAsync(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }
    }

    /**
     * Retrieve all existing instant messengers staged for update by the parent business process
     * Retrieve all instant messengers staged for update by the parent business process  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetStagedInstantMessengersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStagedInstantMessengersRequestBuilder getStagedInstantMessengers(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetStagedInstantMessengersRequestBuilder(ID);
    }
    private okhttp3.Call getStagedPhoneNumberCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStagedPhoneNumberValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getStagedPhoneNumber(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getStagedPhoneNumber(Async)");
        }

        return getStagedPhoneNumberCall(ID, subresourceID, _callback);

    }


    private ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> getStagedPhoneNumberWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getStagedPhoneNumberValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<PhoneReference1089da0ab90910000f70891a998b0887>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStagedPhoneNumberAsync(String ID, String subresourceID, final ApiCallback<PhoneReference1089da0ab90910000f70891a998b0887> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStagedPhoneNumberValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<PhoneReference1089da0ab90910000f70891a998b0887>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStagedPhoneNumberRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetStagedPhoneNumberRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getStagedPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStagedPhoneNumberCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getStagedPhoneNumber request
         * @return PhoneReference1089da0ab90910000f70891a998b0887
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneReference1089da0ab90910000f70891a998b0887 execute() throws ApiException {
            ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> localVarResp = getStagedPhoneNumberWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStagedPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneReference1089da0ab90910000f70891a998b0887&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> executeWithHttpInfo() throws ApiException {
            return getStagedPhoneNumberWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getStagedPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneReference1089da0ab90910000f70891a998b0887> _callback) throws ApiException {
            return getStagedPhoneNumberAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * A phone number as it exists staged for update by the parent business process.
     * Retrieve an existing phone number as it exists when staged by the parent business process.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetStagedPhoneNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetStagedPhoneNumberRequestBuilder getStagedPhoneNumber(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetStagedPhoneNumberRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWebAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWebAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWebAddress(Async)");
        }

        return getWebAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> getWebAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWebAddressValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<WebAddressReferenceE357ae6d466510000ce259f323be01b0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebAddressAsync(String ID, String subresourceID, final ApiCallback<WebAddressReferenceE357ae6d466510000ce259f323be01b0> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebAddressValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<WebAddressReferenceE357ae6d466510000ce259f323be01b0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWebAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWebAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWebAddress request
         * @return WebAddressReferenceE357ae6d466510000ce259f323be01b0
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WebAddressReferenceE357ae6d466510000ce259f323be01b0 execute() throws ApiException {
            ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> localVarResp = getWebAddressWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebAddress request with HTTP info returned
         * @return ApiResponse&lt;WebAddressReferenceE357ae6d466510000ce259f323be01b0&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> executeWithHttpInfo() throws ApiException {
            return getWebAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWebAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebAddressReferenceE357ae6d466510000ce259f323be01b0> _callback) throws ApiException {
            return getWebAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * A web address as it exists staged for update by the parent business process.
     * Retrieve an existing web address as it exists when staged by the parent business process.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWebAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWebAddressRequestBuilder getWebAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWebAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWebAddressesStagedCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/webAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usageType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usageType", usageType));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebAddressesStagedValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWebAddressesStaged(Async)");
        }

        return getWebAddressesStagedCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);

    }


    private ApiResponse<HomeContactInformationChangesGetWebAddressesStagedResponse> getWebAddressesStagedWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getWebAddressesStagedValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, null);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetWebAddressesStagedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebAddressesStagedAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usageType, String usedFor, final ApiCallback<HomeContactInformationChangesGetWebAddressesStagedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebAddressesStagedValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        Type localVarReturnType = new TypeToken<HomeContactInformationChangesGetWebAddressesStagedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWebAddressesStagedRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usageType;
        private String usedFor;

        private GetWebAddressesStagedRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetWebAddressesStagedRequestBuilder
         */
        public GetWebAddressesStagedRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWebAddressesStagedRequestBuilder
         */
        public GetWebAddressesStagedRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary web addresses. (optional)
         * @return GetWebAddressesStagedRequestBuilder
         */
        public GetWebAddressesStagedRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public web addresses. (optional)
         * @return GetWebAddressesStagedRequestBuilder
         */
        public GetWebAddressesStagedRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usageType
         * @param usageType Specifies usage type, such as home or work. Only used if the service provides access to multiple usage types from the same endpoint. (optional)
         * @return GetWebAddressesStagedRequestBuilder
         */
        public GetWebAddressesStagedRequestBuilder usageType(String usageType) {
            this.usageType = usageType;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetWebAddressesStagedRequestBuilder
         */
        public GetWebAddressesStagedRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getWebAddressesStaged
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebAddressesStagedCall(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }


        /**
         * Execute getWebAddressesStaged request
         * @return HomeContactInformationChangesGetWebAddressesStagedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeContactInformationChangesGetWebAddressesStagedResponse execute() throws ApiException {
            ApiResponse<HomeContactInformationChangesGetWebAddressesStagedResponse> localVarResp = getWebAddressesStagedWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWebAddressesStaged request with HTTP info returned
         * @return ApiResponse&lt;HomeContactInformationChangesGetWebAddressesStagedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeContactInformationChangesGetWebAddressesStagedResponse> executeWithHttpInfo() throws ApiException {
            return getWebAddressesStagedWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor);
        }

        /**
         * Execute getWebAddressesStaged request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeContactInformationChangesGetWebAddressesStagedResponse> _callback) throws ApiException {
            return getWebAddressesStagedAsync(ID, limit, offset, primaryOnly, publicOnly, usageType, usedFor, _callback);
        }
    }

    /**
     * Retrieve all existing web addresses staged for update by the parent business process
     * Retrieve all web addresses staged for update by the parent business process  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetWebAddressesStagedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWebAddressesStagedRequestBuilder getWebAddressesStaged(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetWebAddressesStagedRequestBuilder(ID);
    }
    private okhttp3.Call removeAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/addresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling removeAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling removeAddress(Async)");
        }

        return removeAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> removeAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = removeAddressValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAddressAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAddressValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private RemoveAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for removeAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute removeAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * 
     * Remove the specified address. If this address existed before the start of the current business process, it won&#39;t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return RemoveAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAddressRequestBuilder removeAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new RemoveAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call removeEmailAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmailAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling removeEmailAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling removeEmailAddress(Async)");
        }

        return removeEmailAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> removeEmailAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = removeEmailAddressValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeEmailAddressAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmailAddressValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveEmailAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private RemoveEmailAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for removeEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEmailAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute removeEmailAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeEmailAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeEmailAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeEmailAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * 
     * Remove the specified email address. If this address existed before the start of the current business process, it won&#39;t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return RemoveEmailAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmailAddressRequestBuilder removeEmailAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new RemoveEmailAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call removeInstantMessengerCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInstantMessengerValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling removeInstantMessenger(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling removeInstantMessenger(Async)");
        }

        return removeInstantMessengerCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> removeInstantMessengerWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = removeInstantMessengerValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeInstantMessengerAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInstantMessengerValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveInstantMessengerRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private RemoveInstantMessengerRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for removeInstantMessenger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInstantMessengerCall(ID, subresourceID, _callback);
        }


        /**
         * Execute removeInstantMessenger request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeInstantMessengerWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeInstantMessenger request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeInstantMessengerWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeInstantMessenger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeInstantMessengerAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * 
     * Remove the specified instant messenger. If this instant messenger existed before the start of the current business process, it won&#39;t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return RemoveInstantMessengerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInstantMessengerRequestBuilder removeInstantMessenger(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new RemoveInstantMessengerRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call removePhoneNumberCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePhoneNumberValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling removePhoneNumber(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling removePhoneNumber(Async)");
        }

        return removePhoneNumberCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> removePhoneNumberWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = removePhoneNumberValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePhoneNumberAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePhoneNumberValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePhoneNumberRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private RemovePhoneNumberRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for removePhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePhoneNumberCall(ID, subresourceID, _callback);
        }


        /**
         * Execute removePhoneNumber request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePhoneNumberWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removePhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePhoneNumberWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removePhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePhoneNumberAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * 
     * Remove the specified phone number. If this address existed before the start of the current business process, it won&#39;t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return RemovePhoneNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RemovePhoneNumberRequestBuilder removePhoneNumber(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new RemovePhoneNumberRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call removeWebAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling removeWebAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling removeWebAddress(Async)");
        }

        return removeWebAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Void> removeWebAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = removeWebAddressValidateBeforeCall(ID, subresourceID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeWebAddressAsync(String ID, String subresourceID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebAddressValidateBeforeCall(ID, subresourceID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveWebAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private RemoveWebAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for removeWebAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeWebAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute removeWebAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWebAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeWebAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWebAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute removeWebAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeWebAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * 
     * Remove the specified web address. If this address existed before the start of the current business process, it won&#39;t be removed from the target Person until the parent business process completes.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return RemoveWebAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Deleting resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveWebAddressRequestBuilder removeWebAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new RemoveWebAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call submitChangeCall(String ID, ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changeContactInformationEvent765b18aa13af1000064a10bf37b800ed;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/submit"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitChangeValidateBeforeCall(String ID, ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling submitChange(Async)");
        }

        // verify the required parameter 'changeContactInformationEvent765b18aa13af1000064a10bf37b800ed' is set
        if (changeContactInformationEvent765b18aa13af1000064a10bf37b800ed == null) {
            throw new ApiException("Missing the required parameter 'changeContactInformationEvent765b18aa13af1000064a10bf37b800ed' when calling submitChange(Async)");
        }

        return submitChangeCall(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, _callback);

    }


    private ApiResponse<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> submitChangeWithHttpInfo(String ID, ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed) throws ApiException {
        okhttp3.Call localVarCall = submitChangeValidateBeforeCall(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, null);
        Type localVarReturnType = new TypeToken<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitChangeAsync(String ID, ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, final ApiCallback<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitChangeValidateBeforeCall(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, _callback);
        Type localVarReturnType = new TypeToken<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitChangeRequestBuilder {
        private final String ID;
        private BusinessProcessParameters83f6f6b7c38d100009c7ad91dd414a16 businessProcessParameters;
        private String descriptor;
        private String id;

        private SubmitChangeRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set businessProcessParameters
         * @param businessProcessParameters  (optional)
         * @return SubmitChangeRequestBuilder
         */
        public SubmitChangeRequestBuilder businessProcessParameters(BusinessProcessParameters83f6f6b7c38d100009c7ad91dd414a16 businessProcessParameters) {
            this.businessProcessParameters = businessProcessParameters;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return SubmitChangeRequestBuilder
         */
        public SubmitChangeRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return SubmitChangeRequestBuilder
         */
        public SubmitChangeRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for submitChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed = buildBodyParams();
            return submitChangeCall(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, _callback);
        }

        private ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed buildBodyParams() {
            ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed = new ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed();
            return changeContactInformationEvent765b18aa13af1000064a10bf37b800ed;
        }

        /**
         * Execute submitChange request
         * @return ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed execute() throws ApiException {
            ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed = buildBodyParams();
            ApiResponse<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> localVarResp = submitChangeWithHttpInfo(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitChange request with HTTP info returned
         * @return ApiResponse&lt;ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> executeWithHttpInfo() throws ApiException {
            ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed = buildBodyParams();
            return submitChangeWithHttpInfo(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed);
        }

        /**
         * Execute submitChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed> _callback) throws ApiException {
            ChangeContactInformationEvent765b18aa13af1000064a10bf37b800ed changeContactInformationEvent765b18aa13af1000064a10bf37b800ed = buildBodyParams();
            return submitChangeAsync(ID, changeContactInformationEvent765b18aa13af1000064a10bf37b800ed, _callback);
        }
    }

    /**
     * Submit the specified contact change ID.
     * Submits the specified home contact information change ID.   To submit the Home Contact Change event and initiate the Home Contact Change business process, specify an empty request body: {}. To save for later, specify this request body: {     \&quot;businessProcessParameters\&quot;: {         \&quot;action\&quot;:{             \&quot;id\&quot;: \&quot;d9e41a8c446c11de98360015c5e6daf6\&quot;         }     } }  The action id value is the Workday ID of the Save for Later action. If you submit this endpoint with the Save for Later action, you can no longer edit nor resubmit the Home Contact Change event using the REST APIs. The user with correct permissions can edit and submit the saved Home Contact Change event in the Workday UI.  Secured by: Change Home Contact Information (REST Service)  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param changeContactInformationEvent765b18aa13af1000064a10bf37b800ed  (required)
     * @return SubmitChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Resource created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public SubmitChangeRequestBuilder submitChange(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new SubmitChangeRequestBuilder(ID);
    }
    private okhttp3.Call updateAddressCall(String ID, String subresourceID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = homeAddressReference81f66ab16f7510005c53d881876e4843;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/addresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAddressValidateBeforeCall(String ID, String subresourceID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateAddress(Async)");
        }

        // verify the required parameter 'homeAddressReference81f66ab16f7510005c53d881876e4843' is set
        if (homeAddressReference81f66ab16f7510005c53d881876e4843 == null) {
            throw new ApiException("Missing the required parameter 'homeAddressReference81f66ab16f7510005c53d881876e4843' when calling updateAddress(Async)");
        }

        return updateAddressCall(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);

    }


    private ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> updateAddressWithHttpInfo(String ID, String subresourceID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843) throws ApiException {
        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843, null);
        Type localVarReturnType = new TypeToken<HomeAddressReference81f66ab16f7510005c53d881876e4843>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAddressAsync(String ID, String subresourceID, HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843, final ApiCallback<HomeAddressReference81f66ab16f7510005c53d881876e4843> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAddressValidateBeforeCall(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);
        Type localVarReturnType = new TypeToken<HomeAddressReference81f66ab16f7510005c53d881876e4843>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String citySubdivision2Local;
        private String addressLine9;
        private String citySubdivision1Local;
        private String addressLine8Local;
        private String addressLine6;
        private LocalDate effective;
        private String addressLine3;
        private String postalCode;
        private Integer numberDaysWFH;
        private String addressLine2Local;
        private String cityLocal;
        private String addressLine6Local;
        private String addressLine1;
        private String citySubdivision1;
        private String regionSubdivision2;
        private String city;
        private String addressLine4Local;
        private String regionSubdivision1;
        private String addressLine7;
        private String addressLine2;
        private String addressLine5;
        private String addressLine9Local;
        private String addressLine3Local;
        private CountryCity81f66ab16f7510005c53d89089074844 countryCity;
        private String addressLine7Local;
        private String addressLine1Local;
        private Country81f66ab16f7510005c53d8fd5f5b4852 country;
        private CountryRegion81f66ab16f7510005c53d8be2fe44847 countryRegion;
        private String addressLine5Local;
        private String regionSubdivision1Local;
        private String addressLine4;
        private Usage81f66ab16f7510005c53d917926f4857 usage;
        private String addressLine8;
        private String citySubdivision2;
        private String id;

        private UpdateAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set citySubdivision2Local
         * @param citySubdivision2Local City Subdivision 2 - Local (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder citySubdivision2Local(String citySubdivision2Local) {
            this.citySubdivision2Local = citySubdivision2Local;
            return this;
        }
        
        /**
         * Set addressLine9
         * @param addressLine9 Address Line 9 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine9(String addressLine9) {
            this.addressLine9 = addressLine9;
            return this;
        }
        
        /**
         * Set citySubdivision1Local
         * @param citySubdivision1Local City Subdivision 1 - Local (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder citySubdivision1Local(String citySubdivision1Local) {
            this.citySubdivision1Local = citySubdivision1Local;
            return this;
        }
        
        /**
         * Set addressLine8Local
         * @param addressLine8Local Local Address Line 8 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine8Local(String addressLine8Local) {
            this.addressLine8Local = addressLine8Local;
            return this;
        }
        
        /**
         * Set addressLine6
         * @param addressLine6 Address Line 6 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine6(String addressLine6) {
            this.addressLine6 = addressLine6;
            return this;
        }
        
        /**
         * Set effective
         * @param effective The date this business process takes effect. (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder effective(LocalDate effective) {
            this.effective = effective;
            return this;
        }
        
        /**
         * Set addressLine3
         * @param addressLine3 Address Line 3 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine3(String addressLine3) {
            this.addressLine3 = addressLine3;
            return this;
        }
        
        /**
         * Set postalCode
         * @param postalCode Postal Code (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder postalCode(String postalCode) {
            this.postalCode = postalCode;
            return this;
        }
        
        /**
         * Set numberDaysWFH
         * @param numberDaysWFH Number of Days WFH (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder numberDaysWFH(Integer numberDaysWFH) {
            this.numberDaysWFH = numberDaysWFH;
            return this;
        }
        
        /**
         * Set addressLine2Local
         * @param addressLine2Local Local Address Line 2 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine2Local(String addressLine2Local) {
            this.addressLine2Local = addressLine2Local;
            return this;
        }
        
        /**
         * Set cityLocal
         * @param cityLocal City - Local (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder cityLocal(String cityLocal) {
            this.cityLocal = cityLocal;
            return this;
        }
        
        /**
         * Set addressLine6Local
         * @param addressLine6Local Local Address Line 6 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine6Local(String addressLine6Local) {
            this.addressLine6Local = addressLine6Local;
            return this;
        }
        
        /**
         * Set addressLine1
         * @param addressLine1 Address Line 1 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine1(String addressLine1) {
            this.addressLine1 = addressLine1;
            return this;
        }
        
        /**
         * Set citySubdivision1
         * @param citySubdivision1 City Subdivision 1 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder citySubdivision1(String citySubdivision1) {
            this.citySubdivision1 = citySubdivision1;
            return this;
        }
        
        /**
         * Set regionSubdivision2
         * @param regionSubdivision2 Region Subdivision 2 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder regionSubdivision2(String regionSubdivision2) {
            this.regionSubdivision2 = regionSubdivision2;
            return this;
        }
        
        /**
         * Set city
         * @param city City (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set addressLine4Local
         * @param addressLine4Local Local Address Line 4 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine4Local(String addressLine4Local) {
            this.addressLine4Local = addressLine4Local;
            return this;
        }
        
        /**
         * Set regionSubdivision1
         * @param regionSubdivision1 Region Subdivision 1 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder regionSubdivision1(String regionSubdivision1) {
            this.regionSubdivision1 = regionSubdivision1;
            return this;
        }
        
        /**
         * Set addressLine7
         * @param addressLine7 Address Line 7 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine7(String addressLine7) {
            this.addressLine7 = addressLine7;
            return this;
        }
        
        /**
         * Set addressLine2
         * @param addressLine2 Address Line 2 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine2(String addressLine2) {
            this.addressLine2 = addressLine2;
            return this;
        }
        
        /**
         * Set addressLine5
         * @param addressLine5 Address Line 5 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine5(String addressLine5) {
            this.addressLine5 = addressLine5;
            return this;
        }
        
        /**
         * Set addressLine9Local
         * @param addressLine9Local Local Address Line 9 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine9Local(String addressLine9Local) {
            this.addressLine9Local = addressLine9Local;
            return this;
        }
        
        /**
         * Set addressLine3Local
         * @param addressLine3Local Local Address Line 3 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine3Local(String addressLine3Local) {
            this.addressLine3Local = addressLine3Local;
            return this;
        }
        
        /**
         * Set countryCity
         * @param countryCity  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder countryCity(CountryCity81f66ab16f7510005c53d89089074844 countryCity) {
            this.countryCity = countryCity;
            return this;
        }
        
        /**
         * Set addressLine7Local
         * @param addressLine7Local Local Address Line 7 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine7Local(String addressLine7Local) {
            this.addressLine7Local = addressLine7Local;
            return this;
        }
        
        /**
         * Set addressLine1Local
         * @param addressLine1Local Local Address Line 1 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine1Local(String addressLine1Local) {
            this.addressLine1Local = addressLine1Local;
            return this;
        }
        
        /**
         * Set country
         * @param country  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder country(Country81f66ab16f7510005c53d8fd5f5b4852 country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set countryRegion
         * @param countryRegion  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder countryRegion(CountryRegion81f66ab16f7510005c53d8be2fe44847 countryRegion) {
            this.countryRegion = countryRegion;
            return this;
        }
        
        /**
         * Set addressLine5Local
         * @param addressLine5Local Local Address Line 5 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine5Local(String addressLine5Local) {
            this.addressLine5Local = addressLine5Local;
            return this;
        }
        
        /**
         * Set regionSubdivision1Local
         * @param regionSubdivision1Local Region Subdivision 1 - Local (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder regionSubdivision1Local(String regionSubdivision1Local) {
            this.regionSubdivision1Local = regionSubdivision1Local;
            return this;
        }
        
        /**
         * Set addressLine4
         * @param addressLine4 Address Line 4 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine4(String addressLine4) {
            this.addressLine4 = addressLine4;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder usage(Usage81f66ab16f7510005c53d917926f4857 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set addressLine8
         * @param addressLine8 Address Line 8 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder addressLine8(String addressLine8) {
            this.addressLine8 = addressLine8;
            return this;
        }
        
        /**
         * Set citySubdivision2
         * @param citySubdivision2 City Subdivision 2 (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder citySubdivision2(String citySubdivision2) {
            this.citySubdivision2 = citySubdivision2;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateAddressRequestBuilder
         */
        public UpdateAddressRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            return updateAddressCall(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);
        }

        private HomeAddressReference81f66ab16f7510005c53d881876e4843 buildBodyParams() {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = new HomeAddressReference81f66ab16f7510005c53d881876e4843();
            return homeAddressReference81f66ab16f7510005c53d881876e4843;
        }

        /**
         * Execute updateAddress request
         * @return HomeAddressReference81f66ab16f7510005c53d881876e4843
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public HomeAddressReference81f66ab16f7510005c53d881876e4843 execute() throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> localVarResp = updateAddressWithHttpInfo(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAddress request with HTTP info returned
         * @return ApiResponse&lt;HomeAddressReference81f66ab16f7510005c53d881876e4843&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomeAddressReference81f66ab16f7510005c53d881876e4843> executeWithHttpInfo() throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            return updateAddressWithHttpInfo(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843);
        }

        /**
         * Execute updateAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomeAddressReference81f66ab16f7510005c53d881876e4843> _callback) throws ApiException {
            HomeAddressReference81f66ab16f7510005c53d881876e4843 homeAddressReference81f66ab16f7510005c53d881876e4843 = buildBodyParams();
            return updateAddressAsync(ID, subresourceID, homeAddressReference81f66ab16f7510005c53d881876e4843, _callback);
        }
    }

    /**
     * 
     * Update an existing address that is staged for update by the parent business process event.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param homeAddressReference81f66ab16f7510005c53d881876e4843  (required)
     * @return UpdateAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAddressRequestBuilder updateAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateEmailAddressCall(String ID, String subresourceID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailAddressReference0918d433e86b100018119edc1b8f00f7;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/emailAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailAddressValidateBeforeCall(String ID, String subresourceID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateEmailAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateEmailAddress(Async)");
        }

        // verify the required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' is set
        if (emailAddressReference0918d433e86b100018119edc1b8f00f7 == null) {
            throw new ApiException("Missing the required parameter 'emailAddressReference0918d433e86b100018119edc1b8f00f7' when calling updateEmailAddress(Async)");
        }

        return updateEmailAddressCall(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);

    }


    private ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> updateEmailAddressWithHttpInfo(String ID, String subresourceID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7) throws ApiException {
        okhttp3.Call localVarCall = updateEmailAddressValidateBeforeCall(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, null);
        Type localVarReturnType = new TypeToken<EmailAddressReference0918d433e86b100018119edc1b8f00f7>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEmailAddressAsync(String ID, String subresourceID, EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7, final ApiCallback<EmailAddressReference0918d433e86b100018119edc1b8f00f7> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailAddressValidateBeforeCall(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);
        Type localVarReturnType = new TypeToken<EmailAddressReference0918d433e86b100018119edc1b8f00f7>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEmailAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String emailAddress;
        private Usage6333dee5ac2010000c8653405aaa0038 usage;
        private String descriptor;
        private String id;

        private UpdateEmailAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set emailAddress
         * @param emailAddress The email address. (optional)
         * @return UpdateEmailAddressRequestBuilder
         */
        public UpdateEmailAddressRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdateEmailAddressRequestBuilder
         */
        public UpdateEmailAddressRequestBuilder usage(Usage6333dee5ac2010000c8653405aaa0038 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdateEmailAddressRequestBuilder
         */
        public UpdateEmailAddressRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateEmailAddressRequestBuilder
         */
        public UpdateEmailAddressRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            return updateEmailAddressCall(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);
        }

        private EmailAddressReference0918d433e86b100018119edc1b8f00f7 buildBodyParams() {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = new EmailAddressReference0918d433e86b100018119edc1b8f00f7();
            return emailAddressReference0918d433e86b100018119edc1b8f00f7;
        }

        /**
         * Execute updateEmailAddress request
         * @return EmailAddressReference0918d433e86b100018119edc1b8f00f7
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public EmailAddressReference0918d433e86b100018119edc1b8f00f7 execute() throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> localVarResp = updateEmailAddressWithHttpInfo(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;EmailAddressReference0918d433e86b100018119edc1b8f00f7&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailAddressReference0918d433e86b100018119edc1b8f00f7> executeWithHttpInfo() throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            return updateEmailAddressWithHttpInfo(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7);
        }

        /**
         * Execute updateEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailAddressReference0918d433e86b100018119edc1b8f00f7> _callback) throws ApiException {
            EmailAddressReference0918d433e86b100018119edc1b8f00f7 emailAddressReference0918d433e86b100018119edc1b8f00f7 = buildBodyParams();
            return updateEmailAddressAsync(ID, subresourceID, emailAddressReference0918d433e86b100018119edc1b8f00f7, _callback);
        }
    }

    /**
     * 
     * Partially update an existing email address that is staged for update by the parent business process event.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param emailAddressReference0918d433e86b100018119edc1b8f00f7  (required)
     * @return UpdateEmailAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailAddressRequestBuilder updateEmailAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateEmailAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateInstantMessengerCall(String ID, String subresourceID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/instantMessengers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstantMessengerValidateBeforeCall(String ID, String subresourceID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateInstantMessenger(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateInstantMessenger(Async)");
        }

        // verify the required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' is set
        if (instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 == null) {
            throw new ApiException("Missing the required parameter 'instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016' when calling updateInstantMessenger(Async)");
        }

        return updateInstantMessengerCall(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);

    }


    private ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> updateInstantMessengerWithHttpInfo(String ID, String subresourceID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016) throws ApiException {
        okhttp3.Call localVarCall = updateInstantMessengerValidateBeforeCall(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, null);
        Type localVarReturnType = new TypeToken<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInstantMessengerAsync(String ID, String subresourceID, InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, final ApiCallback<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstantMessengerValidateBeforeCall(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);
        Type localVarReturnType = new TypeToken<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateInstantMessengerRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private TypeDe08a6c876a810000cb2e3dd8853001a type;
        private String userName;
        private UsageDe08a6c876a810000cb2e3d738be0019 usage;
        private String id;

        private UpdateInstantMessengerRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set type
         * @param type  (optional)
         * @return UpdateInstantMessengerRequestBuilder
         */
        public UpdateInstantMessengerRequestBuilder type(TypeDe08a6c876a810000cb2e3dd8853001a type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set userName
         * @param userName The instant messenger account username. (optional)
         * @return UpdateInstantMessengerRequestBuilder
         */
        public UpdateInstantMessengerRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdateInstantMessengerRequestBuilder
         */
        public UpdateInstantMessengerRequestBuilder usage(UsageDe08a6c876a810000cb2e3d738be0019 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateInstantMessengerRequestBuilder
         */
        public UpdateInstantMessengerRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateInstantMessenger
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            return updateInstantMessengerCall(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);
        }

        private InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 buildBodyParams() {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = new InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016();
            return instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016;
        }

        /**
         * Execute updateInstantMessenger request
         * @return InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 execute() throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> localVarResp = updateInstantMessengerWithHttpInfo(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateInstantMessenger request with HTTP info returned
         * @return ApiResponse&lt;InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> executeWithHttpInfo() throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            return updateInstantMessengerWithHttpInfo(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016);
        }

        /**
         * Execute updateInstantMessenger request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016> _callback) throws ApiException {
            InstantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016 = buildBodyParams();
            return updateInstantMessengerAsync(ID, subresourceID, instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016, _callback);
        }
    }

    /**
     * 
     * Partially update an existing instant messenger that is staged for update by the parent business process event.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param instantMessengerReferenceDe08a6c876a810000cb2e38a1d2a0016  (required)
     * @return UpdateInstantMessengerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstantMessengerRequestBuilder updateInstantMessenger(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateInstantMessengerRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updatePhoneNumberCall(String ID, String subresourceID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneReference1089da0ab90910000f70891a998b0887;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/phoneNumbers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePhoneNumberValidateBeforeCall(String ID, String subresourceID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updatePhoneNumber(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updatePhoneNumber(Async)");
        }

        // verify the required parameter 'phoneReference1089da0ab90910000f70891a998b0887' is set
        if (phoneReference1089da0ab90910000f70891a998b0887 == null) {
            throw new ApiException("Missing the required parameter 'phoneReference1089da0ab90910000f70891a998b0887' when calling updatePhoneNumber(Async)");
        }

        return updatePhoneNumberCall(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887, _callback);

    }


    private ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> updatePhoneNumberWithHttpInfo(String ID, String subresourceID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887) throws ApiException {
        okhttp3.Call localVarCall = updatePhoneNumberValidateBeforeCall(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887, null);
        Type localVarReturnType = new TypeToken<PhoneReference1089da0ab90910000f70891a998b0887>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePhoneNumberAsync(String ID, String subresourceID, PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887, final ApiCallback<PhoneReference1089da0ab90910000f70891a998b0887> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePhoneNumberValidateBeforeCall(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887, _callback);
        Type localVarReturnType = new TypeToken<PhoneReference1089da0ab90910000f70891a998b0887>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePhoneNumberRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private String extension;
        private String completePhoneNumber;
        private CountryPhoneCode1089da0ab90910000f7089365467088c countryPhoneCode;
        private DeviceType1089da0ab90910000f7089256c7b0888 deviceType;
        private Usage1089da0ab90910000f70892f2de3088a usage;
        private String descriptor;
        private String id;

        private UpdatePhoneNumberRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set extension
         * @param extension The phone extension. (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder extension(String extension) {
            this.extension = extension;
            return this;
        }
        
        /**
         * Set completePhoneNumber
         * @param completePhoneNumber The complete phone number. (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder completePhoneNumber(String completePhoneNumber) {
            this.completePhoneNumber = completePhoneNumber;
            return this;
        }
        
        /**
         * Set countryPhoneCode
         * @param countryPhoneCode  (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder countryPhoneCode(CountryPhoneCode1089da0ab90910000f7089365467088c countryPhoneCode) {
            this.countryPhoneCode = countryPhoneCode;
            return this;
        }
        
        /**
         * Set deviceType
         * @param deviceType  (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder deviceType(DeviceType1089da0ab90910000f7089256c7b0888 deviceType) {
            this.deviceType = deviceType;
            return this;
        }
        
        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder usage(Usage1089da0ab90910000f70892f2de3088a usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set descriptor
         * @param descriptor A preview of the instance (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder descriptor(String descriptor) {
            this.descriptor = descriptor;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdatePhoneNumberRequestBuilder
         */
        public UpdatePhoneNumberRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updatePhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            return updatePhoneNumberCall(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887, _callback);
        }

        private PhoneReference1089da0ab90910000f70891a998b0887 buildBodyParams() {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = new PhoneReference1089da0ab90910000f70891a998b0887();
            return phoneReference1089da0ab90910000f70891a998b0887;
        }

        /**
         * Execute updatePhoneNumber request
         * @return PhoneReference1089da0ab90910000f70891a998b0887
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneReference1089da0ab90910000f70891a998b0887 execute() throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> localVarResp = updatePhoneNumberWithHttpInfo(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneReference1089da0ab90910000f70891a998b0887&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneReference1089da0ab90910000f70891a998b0887> executeWithHttpInfo() throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            return updatePhoneNumberWithHttpInfo(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887);
        }

        /**
         * Execute updatePhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneReference1089da0ab90910000f70891a998b0887> _callback) throws ApiException {
            PhoneReference1089da0ab90910000f70891a998b0887 phoneReference1089da0ab90910000f70891a998b0887 = buildBodyParams();
            return updatePhoneNumberAsync(ID, subresourceID, phoneReference1089da0ab90910000f70891a998b0887, _callback);
        }
    }

    /**
     * 
     * Partially update an existing phone number that is staged for update by the parent business process event.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param phoneReference1089da0ab90910000f70891a998b0887  (required)
     * @return UpdatePhoneNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePhoneNumberRequestBuilder updatePhoneNumber(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdatePhoneNumberRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call updateWebAddressCall(String ID, String subresourceID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webAddressReferenceE357ae6d466510000ce259f323be01b0;

        // create path and map variables
        String localVarPath = "/homeContactInformationChanges/{ID}/webAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebAddressValidateBeforeCall(String ID, String subresourceID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling updateWebAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling updateWebAddress(Async)");
        }

        // verify the required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' is set
        if (webAddressReferenceE357ae6d466510000ce259f323be01b0 == null) {
            throw new ApiException("Missing the required parameter 'webAddressReferenceE357ae6d466510000ce259f323be01b0' when calling updateWebAddress(Async)");
        }

        return updateWebAddressCall(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);

    }


    private ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> updateWebAddressWithHttpInfo(String ID, String subresourceID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0) throws ApiException {
        okhttp3.Call localVarCall = updateWebAddressValidateBeforeCall(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, null);
        Type localVarReturnType = new TypeToken<WebAddressReferenceE357ae6d466510000ce259f323be01b0>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebAddressAsync(String ID, String subresourceID, WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0, final ApiCallback<WebAddressReferenceE357ae6d466510000ce259f323be01b0> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebAddressValidateBeforeCall(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);
        Type localVarReturnType = new TypeToken<WebAddressReferenceE357ae6d466510000ce259f323be01b0>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateWebAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;
        private UsageE357ae6d466510000ce25a08bfe401b3 usage;
        private String url;
        private String id;

        private UpdateWebAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Set usage
         * @param usage  (optional)
         * @return UpdateWebAddressRequestBuilder
         */
        public UpdateWebAddressRequestBuilder usage(UsageE357ae6d466510000ce25a08bfe401b3 usage) {
            this.usage = usage;
            return this;
        }
        
        /**
         * Set url
         * @param url The complete URL address for the web address. (optional)
         * @return UpdateWebAddressRequestBuilder
         */
        public UpdateWebAddressRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set id
         * @param id Id of the instance (optional)
         * @return UpdateWebAddressRequestBuilder
         */
        public UpdateWebAddressRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for updateWebAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            return updateWebAddressCall(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);
        }

        private WebAddressReferenceE357ae6d466510000ce259f323be01b0 buildBodyParams() {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = new WebAddressReferenceE357ae6d466510000ce259f323be01b0();
            return webAddressReferenceE357ae6d466510000ce259f323be01b0;
        }

        /**
         * Execute updateWebAddress request
         * @return WebAddressReferenceE357ae6d466510000ce259f323be01b0
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WebAddressReferenceE357ae6d466510000ce259f323be01b0 execute() throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> localVarResp = updateWebAddressWithHttpInfo(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateWebAddress request with HTTP info returned
         * @return ApiResponse&lt;WebAddressReferenceE357ae6d466510000ce259f323be01b0&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebAddressReferenceE357ae6d466510000ce259f323be01b0> executeWithHttpInfo() throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            return updateWebAddressWithHttpInfo(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0);
        }

        /**
         * Execute updateWebAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebAddressReferenceE357ae6d466510000ce259f323be01b0> _callback) throws ApiException {
            WebAddressReferenceE357ae6d466510000ce259f323be01b0 webAddressReferenceE357ae6d466510000ce259f323be01b0 = buildBodyParams();
            return updateWebAddressAsync(ID, subresourceID, webAddressReferenceE357ae6d466510000ce259f323be01b0, _callback);
        }
    }

    /**
     * 
     * Partially update an existing web address that is staged for update by the parent business process event.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @param webAddressReferenceE357ae6d466510000ce259f323be01b0  (required)
     * @return UpdateWebAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. Updating resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebAddressRequestBuilder updateWebAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new UpdateWebAddressRequestBuilder(ID, subresourceID);
    }
}
