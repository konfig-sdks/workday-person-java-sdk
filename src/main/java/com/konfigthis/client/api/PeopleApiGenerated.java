/*
 * person
 * The Person REST APIs enable you to access information about the worker person, including country-specific configuration information about name components.
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressReference9c3ab7b846e4100009e5ec55fa530024;
import com.konfigthis.client.model.ERRORMODELREFERENCE;
import com.konfigthis.client.model.EmailReference9c3ab7b846e41000327e788d9664012a;
import com.konfigthis.client.model.InstantMessengerAccount33e26848dc00100036f723337ebb0132;
import java.time.LocalDate;
import com.konfigthis.client.model.MediaDownload5d5f0fb1184b10000b16f0e5c20f0000;
import com.konfigthis.client.model.Name33e26848dc0010002f1ae76d63ec0061;
import com.konfigthis.client.model.PeopleGetAdditionalNamesResponse;
import com.konfigthis.client.model.PeopleGetHomeAddressesResponse;
import com.konfigthis.client.model.PeopleGetHomeEmailsResponse;
import com.konfigthis.client.model.PeopleGetHomeInstantMessengersResponse;
import com.konfigthis.client.model.PeopleGetHomePhonesResponse;
import com.konfigthis.client.model.PeopleGetHomeWebAddressesResponse;
import com.konfigthis.client.model.PeopleGetLegalNameResponse;
import com.konfigthis.client.model.PeopleGetNamePronunciationsResponse;
import com.konfigthis.client.model.PeopleGetPersonByIdResponse;
import com.konfigthis.client.model.PeopleGetPersonalInfoResponse;
import com.konfigthis.client.model.PeopleGetPersonalPhotosResponse;
import com.konfigthis.client.model.PeopleGetPreferredNameResponse;
import com.konfigthis.client.model.PeopleGetPublicContactInformationResponse;
import com.konfigthis.client.model.PeopleGetWorkAddressesResponse;
import com.konfigthis.client.model.PeopleGetWorkEmailsResponse;
import com.konfigthis.client.model.PeopleGetWorkInstantMessengerUsernamesResponse;
import com.konfigthis.client.model.PeopleGetWorkPhonesResponse;
import com.konfigthis.client.model.PeopleGetWorkWebAddressesResponse;
import com.konfigthis.client.model.PersonPhoto6b9baf67ce60100007d43c79e7a30011;
import com.konfigthis.client.model.PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235;
import com.konfigthis.client.model.PersonRepresentationE451ce2c8b48100007c312f3f72700b3;
import com.konfigthis.client.model.PersonalInformation414c4cee7d91100023fe329d6f900018;
import com.konfigthis.client.model.PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd;
import com.konfigthis.client.model.WebAddress33e26848dc0010003893a0202ced0165;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAdditionalNameCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/additionalNames/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdditionalNameValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAdditionalName(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getAdditionalName(Async)");
        }

        return getAdditionalNameCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> getAdditionalNameWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getAdditionalNameValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<Name33e26848dc0010002f1ae76d63ec0061>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdditionalNameAsync(String ID, String subresourceID, final ApiCallback<Name33e26848dc0010002f1ae76d63ec0061> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdditionalNameValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<Name33e26848dc0010002f1ae76d63ec0061>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdditionalNameRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetAdditionalNameRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getAdditionalName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdditionalNameCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getAdditionalName request
         * @return Name33e26848dc0010002f1ae76d63ec0061
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Name33e26848dc0010002f1ae76d63ec0061 execute() throws ApiException {
            ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> localVarResp = getAdditionalNameWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdditionalName request with HTTP info returned
         * @return ApiResponse&lt;Name33e26848dc0010002f1ae76d63ec0061&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> executeWithHttpInfo() throws ApiException {
            return getAdditionalNameWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getAdditionalName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Name33e26848dc0010002f1ae76d63ec0061> _callback) throws ApiException {
            return getAdditionalNameAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves an additional name.
     * Retrieves an additional name for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetAdditionalNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAdditionalNameRequestBuilder getAdditionalName(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetAdditionalNameRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getAdditionalNamesCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/additionalNames"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdditionalNamesValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getAdditionalNames(Async)");
        }

        return getAdditionalNamesCall(ID, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetAdditionalNamesResponse> getAdditionalNamesWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getAdditionalNamesValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetAdditionalNamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdditionalNamesAsync(String ID, Long limit, Long offset, final ApiCallback<PeopleGetAdditionalNamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdditionalNamesValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetAdditionalNamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdditionalNamesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetAdditionalNamesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetAdditionalNamesRequestBuilder
         */
        public GetAdditionalNamesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetAdditionalNamesRequestBuilder
         */
        public GetAdditionalNamesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getAdditionalNames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdditionalNamesCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getAdditionalNames request
         * @return PeopleGetAdditionalNamesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetAdditionalNamesResponse execute() throws ApiException {
            ApiResponse<PeopleGetAdditionalNamesResponse> localVarResp = getAdditionalNamesWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdditionalNames request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetAdditionalNamesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetAdditionalNamesResponse> executeWithHttpInfo() throws ApiException {
            return getAdditionalNamesWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getAdditionalNames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetAdditionalNamesResponse> _callback) throws ApiException {
            return getAdditionalNamesAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of additional names.
     * Retrieves all additional names for the person with the specified ID.  Secured by: Person Data:  Name, Self-Service: Name  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetAdditionalNamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAdditionalNamesRequestBuilder getAdditionalNames(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetAdditionalNamesRequestBuilder(ID);
    }
    private okhttp3.Call getByIdCall(String ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getById(Async)");
        }

        return getByIdCall(ID, _callback);

    }


    private ApiResponse<PersonRepresentationE451ce2c8b48100007c312f3f72700b3> getByIdWithHttpInfo(String ID) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ID, null);
        Type localVarReturnType = new TypeToken<PersonRepresentationE451ce2c8b48100007c312f3f72700b3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String ID, final ApiCallback<PersonRepresentationE451ce2c8b48100007c312f3f72700b3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(ID, _callback);
        Type localVarReturnType = new TypeToken<PersonRepresentationE451ce2c8b48100007c312f3f72700b3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String ID;

        private GetByIdRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(ID, _callback);
        }


        /**
         * Execute getById request
         * @return PersonRepresentationE451ce2c8b48100007c312f3f72700b3
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PersonRepresentationE451ce2c8b48100007c312f3f72700b3 execute() throws ApiException {
            ApiResponse<PersonRepresentationE451ce2c8b48100007c312f3f72700b3> localVarResp = getByIdWithHttpInfo(ID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;PersonRepresentationE451ce2c8b48100007c312f3f72700b3&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonRepresentationE451ce2c8b48100007c312f3f72700b3> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(ID);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonRepresentationE451ce2c8b48100007c312f3f72700b3> _callback) throws ApiException {
            return getByIdAsync(ID, _callback);
        }
    }

    /**
     * Retrieves a person in your Workday tenant.
     * Retrieves a person with the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve.  Secured by: REST API Public  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetByIdRequestBuilder(ID);
    }
    private okhttp3.Call getHomeAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getHomeAddress(Async)");
        }

        return getHomeAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<AddressReference9c3ab7b846e4100009e5ec55fa530024> getHomeAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getHomeAddressValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<AddressReference9c3ab7b846e4100009e5ec55fa530024>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeAddressAsync(String ID, String subresourceID, final ApiCallback<AddressReference9c3ab7b846e4100009e5ec55fa530024> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeAddressValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<AddressReference9c3ab7b846e4100009e5ec55fa530024>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetHomeAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getHomeAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getHomeAddress request
         * @return AddressReference9c3ab7b846e4100009e5ec55fa530024
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public AddressReference9c3ab7b846e4100009e5ec55fa530024 execute() throws ApiException {
            ApiResponse<AddressReference9c3ab7b846e4100009e5ec55fa530024> localVarResp = getHomeAddressWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeAddress request with HTTP info returned
         * @return ApiResponse&lt;AddressReference9c3ab7b846e4100009e5ec55fa530024&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddressReference9c3ab7b846e4100009e5ec55fa530024> executeWithHttpInfo() throws ApiException {
            return getHomeAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getHomeAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddressReference9c3ab7b846e4100009e5ec55fa530024> _callback) throws ApiException {
            return getHomeAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a home address.
     * Retrieves a home address for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetHomeAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeAddressRequestBuilder getHomeAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetHomeAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getHomeAddressesCall(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effective != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effective", effective));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeAddressesValidateBeforeCall(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeAddresses(Async)");
        }

        return getHomeAddressesCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetHomeAddressesResponse> getHomeAddressesWithHttpInfo(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getHomeAddressesValidateBeforeCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetHomeAddressesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeAddressesAsync(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetHomeAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeAddressesValidateBeforeCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetHomeAddressesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeAddressesRequestBuilder {
        private final String ID;
        private LocalDate effective;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetHomeAddressesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set effective
         * @param effective The effective date of the person&#39;s addresses using the yyyy-mm-dd format. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder effective(LocalDate effective) {
            this.effective = effective;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary addresses. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public addresses. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetHomeAddressesRequestBuilder
         */
        public GetHomeAddressesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getHomeAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeAddressesCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getHomeAddresses request
         * @return PeopleGetHomeAddressesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetHomeAddressesResponse execute() throws ApiException {
            ApiResponse<PeopleGetHomeAddressesResponse> localVarResp = getHomeAddressesWithHttpInfo(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeAddresses request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetHomeAddressesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetHomeAddressesResponse> executeWithHttpInfo() throws ApiException {
            return getHomeAddressesWithHttpInfo(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getHomeAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetHomeAddressesResponse> _callback) throws ApiException {
            return getHomeAddressesAsync(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of home addresses.
     * Retrieves all home addresses for the person with the specified ID.  Secured by: Person Data: Home Address, Self-Service: Home Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetHomeAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeAddressesRequestBuilder getHomeAddresses(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetHomeAddressesRequestBuilder(ID);
    }
    private okhttp3.Call getHomeEmailCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeEmails/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeEmailValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeEmail(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getHomeEmail(Async)");
        }

        return getHomeEmailCall(ID, subresourceID, _callback);

    }


    private ApiResponse<EmailReference9c3ab7b846e41000327e788d9664012a> getHomeEmailWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getHomeEmailValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<EmailReference9c3ab7b846e41000327e788d9664012a>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeEmailAsync(String ID, String subresourceID, final ApiCallback<EmailReference9c3ab7b846e41000327e788d9664012a> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeEmailValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<EmailReference9c3ab7b846e41000327e788d9664012a>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeEmailRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetHomeEmailRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getHomeEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeEmailCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getHomeEmail request
         * @return EmailReference9c3ab7b846e41000327e788d9664012a
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public EmailReference9c3ab7b846e41000327e788d9664012a execute() throws ApiException {
            ApiResponse<EmailReference9c3ab7b846e41000327e788d9664012a> localVarResp = getHomeEmailWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeEmail request with HTTP info returned
         * @return ApiResponse&lt;EmailReference9c3ab7b846e41000327e788d9664012a&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailReference9c3ab7b846e41000327e788d9664012a> executeWithHttpInfo() throws ApiException {
            return getHomeEmailWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getHomeEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailReference9c3ab7b846e41000327e788d9664012a> _callback) throws ApiException {
            return getHomeEmailAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a home email address.
     * Retrieve a home email address for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetHomeEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeEmailRequestBuilder getHomeEmail(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetHomeEmailRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getHomeEmailsCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeEmails"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeEmailsValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeEmails(Async)");
        }

        return getHomeEmailsCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetHomeEmailsResponse> getHomeEmailsWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getHomeEmailsValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetHomeEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeEmailsAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetHomeEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeEmailsValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetHomeEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeEmailsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetHomeEmailsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetHomeEmailsRequestBuilder
         */
        public GetHomeEmailsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetHomeEmailsRequestBuilder
         */
        public GetHomeEmailsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary email addresses. (optional)
         * @return GetHomeEmailsRequestBuilder
         */
        public GetHomeEmailsRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public email addresses. (optional)
         * @return GetHomeEmailsRequestBuilder
         */
        public GetHomeEmailsRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetHomeEmailsRequestBuilder
         */
        public GetHomeEmailsRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getHomeEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeEmailsCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getHomeEmails request
         * @return PeopleGetHomeEmailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetHomeEmailsResponse execute() throws ApiException {
            ApiResponse<PeopleGetHomeEmailsResponse> localVarResp = getHomeEmailsWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeEmails request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetHomeEmailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetHomeEmailsResponse> executeWithHttpInfo() throws ApiException {
            return getHomeEmailsWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getHomeEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetHomeEmailsResponse> _callback) throws ApiException {
            return getHomeEmailsAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of home email addresses.
     * Retrieve all home email addresses for the person with the specified ID.  Secured by: Person Data: Home Email, Self-Service: Home Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetHomeEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeEmailsRequestBuilder getHomeEmails(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetHomeEmailsRequestBuilder(ID);
    }
    private okhttp3.Call getHomeInstantMessengerUsernameCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeInstantMessengers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeInstantMessengerUsernameValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeInstantMessengerUsername(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getHomeInstantMessengerUsername(Async)");
        }

        return getHomeInstantMessengerUsernameCall(ID, subresourceID, _callback);

    }


    private ApiResponse<InstantMessengerAccount33e26848dc00100036f723337ebb0132> getHomeInstantMessengerUsernameWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getHomeInstantMessengerUsernameValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<InstantMessengerAccount33e26848dc00100036f723337ebb0132>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeInstantMessengerUsernameAsync(String ID, String subresourceID, final ApiCallback<InstantMessengerAccount33e26848dc00100036f723337ebb0132> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeInstantMessengerUsernameValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<InstantMessengerAccount33e26848dc00100036f723337ebb0132>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeInstantMessengerUsernameRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetHomeInstantMessengerUsernameRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getHomeInstantMessengerUsername
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeInstantMessengerUsernameCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getHomeInstantMessengerUsername request
         * @return InstantMessengerAccount33e26848dc00100036f723337ebb0132
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public InstantMessengerAccount33e26848dc00100036f723337ebb0132 execute() throws ApiException {
            ApiResponse<InstantMessengerAccount33e26848dc00100036f723337ebb0132> localVarResp = getHomeInstantMessengerUsernameWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeInstantMessengerUsername request with HTTP info returned
         * @return ApiResponse&lt;InstantMessengerAccount33e26848dc00100036f723337ebb0132&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstantMessengerAccount33e26848dc00100036f723337ebb0132> executeWithHttpInfo() throws ApiException {
            return getHomeInstantMessengerUsernameWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getHomeInstantMessengerUsername request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstantMessengerAccount33e26848dc00100036f723337ebb0132> _callback) throws ApiException {
            return getHomeInstantMessengerUsernameAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a home instant messenger account username.
     * Retrieves a home instant messenger account username for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetHomeInstantMessengerUsernameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeInstantMessengerUsernameRequestBuilder getHomeInstantMessengerUsername(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetHomeInstantMessengerUsernameRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getHomeInstantMessengersCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeInstantMessengers"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeInstantMessengersValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeInstantMessengers(Async)");
        }

        return getHomeInstantMessengersCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetHomeInstantMessengersResponse> getHomeInstantMessengersWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getHomeInstantMessengersValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetHomeInstantMessengersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeInstantMessengersAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetHomeInstantMessengersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeInstantMessengersValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetHomeInstantMessengersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeInstantMessengersRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetHomeInstantMessengersRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetHomeInstantMessengersRequestBuilder
         */
        public GetHomeInstantMessengersRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetHomeInstantMessengersRequestBuilder
         */
        public GetHomeInstantMessengersRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary instant messenger account usernames. (optional)
         * @return GetHomeInstantMessengersRequestBuilder
         */
        public GetHomeInstantMessengersRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public instant messenger usernames. (optional)
         * @return GetHomeInstantMessengersRequestBuilder
         */
        public GetHomeInstantMessengersRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetHomeInstantMessengersRequestBuilder
         */
        public GetHomeInstantMessengersRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getHomeInstantMessengers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeInstantMessengersCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getHomeInstantMessengers request
         * @return PeopleGetHomeInstantMessengersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetHomeInstantMessengersResponse execute() throws ApiException {
            ApiResponse<PeopleGetHomeInstantMessengersResponse> localVarResp = getHomeInstantMessengersWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeInstantMessengers request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetHomeInstantMessengersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetHomeInstantMessengersResponse> executeWithHttpInfo() throws ApiException {
            return getHomeInstantMessengersWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getHomeInstantMessengers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetHomeInstantMessengersResponse> _callback) throws ApiException {
            return getHomeInstantMessengersAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of home instant messenger account usernames.
     * Retrieves all home instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Home Instant Messenger, Self-Service: Home Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetHomeInstantMessengersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeInstantMessengersRequestBuilder getHomeInstantMessengers(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetHomeInstantMessengersRequestBuilder(ID);
    }
    private okhttp3.Call getHomePhoneCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homePhones/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomePhoneValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomePhone(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getHomePhone(Async)");
        }

        return getHomePhoneCall(ID, subresourceID, _callback);

    }


    private ApiResponse<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> getHomePhoneWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getHomePhoneValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomePhoneAsync(String ID, String subresourceID, final ApiCallback<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomePhoneValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomePhoneRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetHomePhoneRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getHomePhone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomePhoneCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getHomePhone request
         * @return PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd execute() throws ApiException {
            ApiResponse<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> localVarResp = getHomePhoneWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomePhone request with HTTP info returned
         * @return ApiResponse&lt;PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> executeWithHttpInfo() throws ApiException {
            return getHomePhoneWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getHomePhone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> _callback) throws ApiException {
            return getHomePhoneAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a home phone number.
     * Retrieves a home phone number for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetHomePhoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomePhoneRequestBuilder getHomePhone(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetHomePhoneRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getHomePhonesCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homePhones"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomePhonesValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomePhones(Async)");
        }

        return getHomePhonesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetHomePhonesResponse> getHomePhonesWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getHomePhonesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetHomePhonesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomePhonesAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetHomePhonesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomePhonesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetHomePhonesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomePhonesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetHomePhonesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetHomePhonesRequestBuilder
         */
        public GetHomePhonesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetHomePhonesRequestBuilder
         */
        public GetHomePhonesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary phone numbers. (optional)
         * @return GetHomePhonesRequestBuilder
         */
        public GetHomePhonesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public phone numbers. (optional)
         * @return GetHomePhonesRequestBuilder
         */
        public GetHomePhonesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetHomePhonesRequestBuilder
         */
        public GetHomePhonesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getHomePhones
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomePhonesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getHomePhones request
         * @return PeopleGetHomePhonesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetHomePhonesResponse execute() throws ApiException {
            ApiResponse<PeopleGetHomePhonesResponse> localVarResp = getHomePhonesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomePhones request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetHomePhonesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetHomePhonesResponse> executeWithHttpInfo() throws ApiException {
            return getHomePhonesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getHomePhones request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetHomePhonesResponse> _callback) throws ApiException {
            return getHomePhonesAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of home phone numbers.
     * Retrieves all home phone numbers for the person with the specified ID.  Secured by: Person Data: Home Phone, Self-Service: Home Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetHomePhonesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomePhonesRequestBuilder getHomePhones(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetHomePhonesRequestBuilder(ID);
    }
    private okhttp3.Call getHomeWebAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeWebAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeWebAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeWebAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getHomeWebAddress(Async)");
        }

        return getHomeWebAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<WebAddress33e26848dc0010003893a0202ced0165> getHomeWebAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getHomeWebAddressValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<WebAddress33e26848dc0010003893a0202ced0165>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeWebAddressAsync(String ID, String subresourceID, final ApiCallback<WebAddress33e26848dc0010003893a0202ced0165> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeWebAddressValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<WebAddress33e26848dc0010003893a0202ced0165>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeWebAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetHomeWebAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getHomeWebAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeWebAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getHomeWebAddress request
         * @return WebAddress33e26848dc0010003893a0202ced0165
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WebAddress33e26848dc0010003893a0202ced0165 execute() throws ApiException {
            ApiResponse<WebAddress33e26848dc0010003893a0202ced0165> localVarResp = getHomeWebAddressWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeWebAddress request with HTTP info returned
         * @return ApiResponse&lt;WebAddress33e26848dc0010003893a0202ced0165&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebAddress33e26848dc0010003893a0202ced0165> executeWithHttpInfo() throws ApiException {
            return getHomeWebAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getHomeWebAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebAddress33e26848dc0010003893a0202ced0165> _callback) throws ApiException {
            return getHomeWebAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a home web address.
     * Retrieves a home web address for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetHomeWebAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeWebAddressRequestBuilder getHomeWebAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetHomeWebAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getHomeWebAddressesCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/homeWebAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHomeWebAddressesValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getHomeWebAddresses(Async)");
        }

        return getHomeWebAddressesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetHomeWebAddressesResponse> getHomeWebAddressesWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getHomeWebAddressesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetHomeWebAddressesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHomeWebAddressesAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetHomeWebAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHomeWebAddressesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetHomeWebAddressesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHomeWebAddressesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetHomeWebAddressesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetHomeWebAddressesRequestBuilder
         */
        public GetHomeWebAddressesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetHomeWebAddressesRequestBuilder
         */
        public GetHomeWebAddressesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary web addresses. (optional)
         * @return GetHomeWebAddressesRequestBuilder
         */
        public GetHomeWebAddressesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public web addresses. (optional)
         * @return GetHomeWebAddressesRequestBuilder
         */
        public GetHomeWebAddressesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetHomeWebAddressesRequestBuilder
         */
        public GetHomeWebAddressesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getHomeWebAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHomeWebAddressesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getHomeWebAddresses request
         * @return PeopleGetHomeWebAddressesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetHomeWebAddressesResponse execute() throws ApiException {
            ApiResponse<PeopleGetHomeWebAddressesResponse> localVarResp = getHomeWebAddressesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHomeWebAddresses request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetHomeWebAddressesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetHomeWebAddressesResponse> executeWithHttpInfo() throws ApiException {
            return getHomeWebAddressesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getHomeWebAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetHomeWebAddressesResponse> _callback) throws ApiException {
            return getHomeWebAddressesAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of home web addresses.
     * Retrieves all home web addresses for the person with the specified ID.  Secured by: Person Data: Home Web Address, Self-Service: Home Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetHomeWebAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetHomeWebAddressesRequestBuilder getHomeWebAddresses(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetHomeWebAddressesRequestBuilder(ID);
    }
    private okhttp3.Call getLegalNameCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/legalName/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegalNameValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getLegalName(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getLegalName(Async)");
        }

        return getLegalNameCall(ID, subresourceID, _callback);

    }


    private ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> getLegalNameWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getLegalNameValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<Name33e26848dc0010002f1ae76d63ec0061>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegalNameAsync(String ID, String subresourceID, final ApiCallback<Name33e26848dc0010002f1ae76d63ec0061> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegalNameValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<Name33e26848dc0010002f1ae76d63ec0061>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegalNameRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetLegalNameRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getLegalName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegalNameCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getLegalName request
         * @return Name33e26848dc0010002f1ae76d63ec0061
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Name33e26848dc0010002f1ae76d63ec0061 execute() throws ApiException {
            ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> localVarResp = getLegalNameWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegalName request with HTTP info returned
         * @return ApiResponse&lt;Name33e26848dc0010002f1ae76d63ec0061&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> executeWithHttpInfo() throws ApiException {
            return getLegalNameWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getLegalName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Name33e26848dc0010002f1ae76d63ec0061> _callback) throws ApiException {
            return getLegalNameAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves the legal name instance.
     * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetLegalNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetLegalNameRequestBuilder getLegalName(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetLegalNameRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getLegalName_0Call(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/legalName"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLegalName_0ValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getLegalName_0(Async)");
        }

        return getLegalName_0Call(ID, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetLegalNameResponse> getLegalName_0WithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getLegalName_0ValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetLegalNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLegalName_0Async(String ID, Long limit, Long offset, final ApiCallback<PeopleGetLegalNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLegalName_0ValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetLegalNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLegalName0RequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetLegalName0RequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetLegalName0RequestBuilder
         */
        public GetLegalName0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetLegalName0RequestBuilder
         */
        public GetLegalName0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getLegalName_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLegalName_0Call(ID, limit, offset, _callback);
        }


        /**
         * Execute getLegalName_0 request
         * @return PeopleGetLegalNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetLegalNameResponse execute() throws ApiException {
            ApiResponse<PeopleGetLegalNameResponse> localVarResp = getLegalName_0WithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLegalName_0 request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetLegalNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetLegalNameResponse> executeWithHttpInfo() throws ApiException {
            return getLegalName_0WithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getLegalName_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetLegalNameResponse> _callback) throws ApiException {
            return getLegalName_0Async(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves the legal name instance.
     * Retrieves the legal name for the person with the specified ID.  Secured by: Person Data: Legal Name, Self-Service: Legal Name  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetLegalName0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetLegalName0RequestBuilder getLegalName_0(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetLegalName0RequestBuilder(ID);
    }
    private okhttp3.Call getNamePronunciationCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/audioNamePronunciation/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamePronunciationValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getNamePronunciation(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getNamePronunciation(Async)");
        }

        return getNamePronunciationCall(ID, subresourceID, _callback);

    }


    private ApiResponse<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000> getNamePronunciationWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getNamePronunciationValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNamePronunciationAsync(String ID, String subresourceID, final ApiCallback<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamePronunciationValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNamePronunciationRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetNamePronunciationRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getNamePronunciation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNamePronunciationCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getNamePronunciation request
         * @return MediaDownload5d5f0fb1184b10000b16f0e5c20f0000
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public MediaDownload5d5f0fb1184b10000b16f0e5c20f0000 execute() throws ApiException {
            ApiResponse<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000> localVarResp = getNamePronunciationWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNamePronunciation request with HTTP info returned
         * @return ApiResponse&lt;MediaDownload5d5f0fb1184b10000b16f0e5c20f0000&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000> executeWithHttpInfo() throws ApiException {
            return getNamePronunciationWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getNamePronunciation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MediaDownload5d5f0fb1184b10000b16f0e5c20f0000> _callback) throws ApiException {
            return getNamePronunciationAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves an Audio Name Pronunciation
     * Retrieves a Audio Name Pronunciation of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetNamePronunciationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetNamePronunciationRequestBuilder getNamePronunciation(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetNamePronunciationRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getNamePronunciationsCall(String ID, Boolean currentAudio, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/audioNamePronunciation"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currentAudio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentAudio", currentAudio));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamePronunciationsValidateBeforeCall(String ID, Boolean currentAudio, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getNamePronunciations(Async)");
        }

        return getNamePronunciationsCall(ID, currentAudio, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetNamePronunciationsResponse> getNamePronunciationsWithHttpInfo(String ID, Boolean currentAudio, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getNamePronunciationsValidateBeforeCall(ID, currentAudio, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetNamePronunciationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNamePronunciationsAsync(String ID, Boolean currentAudio, Long limit, Long offset, final ApiCallback<PeopleGetNamePronunciationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamePronunciationsValidateBeforeCall(ID, currentAudio, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetNamePronunciationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNamePronunciationsRequestBuilder {
        private final String ID;
        private Boolean currentAudio;
        private Long limit;
        private Long offset;

        private GetNamePronunciationsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set currentAudio
         * @param currentAudio Download only the currently active audio (optional)
         * @return GetNamePronunciationsRequestBuilder
         */
        public GetNamePronunciationsRequestBuilder currentAudio(Boolean currentAudio) {
            this.currentAudio = currentAudio;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetNamePronunciationsRequestBuilder
         */
        public GetNamePronunciationsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetNamePronunciationsRequestBuilder
         */
        public GetNamePronunciationsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getNamePronunciations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNamePronunciationsCall(ID, currentAudio, limit, offset, _callback);
        }


        /**
         * Execute getNamePronunciations request
         * @return PeopleGetNamePronunciationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetNamePronunciationsResponse execute() throws ApiException {
            ApiResponse<PeopleGetNamePronunciationsResponse> localVarResp = getNamePronunciationsWithHttpInfo(ID, currentAudio, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNamePronunciations request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetNamePronunciationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetNamePronunciationsResponse> executeWithHttpInfo() throws ApiException {
            return getNamePronunciationsWithHttpInfo(ID, currentAudio, limit, offset);
        }

        /**
         * Execute getNamePronunciations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetNamePronunciationsResponse> _callback) throws ApiException {
            return getNamePronunciationsAsync(ID, currentAudio, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of Audio Name Pronunciations
     * Retrieves all Audio Name Pronunciations of a Person  Secured by: Person Data: Name Pronunciation  Scope: Personal Data
     * @param ID The Workday ID of the resource. (required)
     * @return GetNamePronunciationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetNamePronunciationsRequestBuilder getNamePronunciations(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetNamePronunciationsRequestBuilder(ID);
    }
    private okhttp3.Call getPersonByIdCall(Long limit, Long offset, String universalID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (universalID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("universal_ID", universalID));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonByIdValidateBeforeCall(Long limit, Long offset, String universalID, final ApiCallback _callback) throws ApiException {
        return getPersonByIdCall(limit, offset, universalID, _callback);

    }


    private ApiResponse<PeopleGetPersonByIdResponse> getPersonByIdWithHttpInfo(Long limit, Long offset, String universalID) throws ApiException {
        okhttp3.Call localVarCall = getPersonByIdValidateBeforeCall(limit, offset, universalID, null);
        Type localVarReturnType = new TypeToken<PeopleGetPersonByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonByIdAsync(Long limit, Long offset, String universalID, final ApiCallback<PeopleGetPersonByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonByIdValidateBeforeCall(limit, offset, universalID, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetPersonByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonByIdRequestBuilder {
        private Long limit;
        private Long offset;
        private String universalID;

        private GetPersonByIdRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPersonByIdRequestBuilder
         */
        public GetPersonByIdRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPersonByIdRequestBuilder
         */
        public GetPersonByIdRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set universalID
         * @param universalID The Universal ID of the person you want to retrieve. (optional)
         * @return GetPersonByIdRequestBuilder
         */
        public GetPersonByIdRequestBuilder universalID(String universalID) {
            this.universalID = universalID;
            return this;
        }
        
        /**
         * Build call for getPersonById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonByIdCall(limit, offset, universalID, _callback);
        }


        /**
         * Execute getPersonById request
         * @return PeopleGetPersonByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetPersonByIdResponse execute() throws ApiException {
            ApiResponse<PeopleGetPersonByIdResponse> localVarResp = getPersonByIdWithHttpInfo(limit, offset, universalID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonById request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetPersonByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetPersonByIdResponse> executeWithHttpInfo() throws ApiException {
            return getPersonByIdWithHttpInfo(limit, offset, universalID);
        }

        /**
         * Execute getPersonById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetPersonByIdResponse> _callback) throws ApiException {
            return getPersonByIdAsync(limit, offset, universalID, _callback);
        }
    }

    /**
     * Retrieves a person in your Workday tenant.
     * Retrieves a person of the specified ID. You can use the returned ID from GET /people or GET /workers as the ID of the person whose information you want to retrieve. When the person has any person information, for example:home addresses, a hyperlink to the resource of the information will be included in the response.  Secured by: REST API Public  Contains attachment(s)
     * @return GetPersonByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonByIdRequestBuilder getPersonById() throws IllegalArgumentException {
        return new GetPersonByIdRequestBuilder();
    }
    private okhttp3.Call getPersonalInfoCall(String ID, String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/personalInformation"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalInfoValidateBeforeCall(String ID, String country, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPersonalInfo(Async)");
        }

        return getPersonalInfoCall(ID, country, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetPersonalInfoResponse> getPersonalInfoWithHttpInfo(String ID, String country, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPersonalInfoValidateBeforeCall(ID, country, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetPersonalInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalInfoAsync(String ID, String country, Long limit, Long offset, final ApiCallback<PeopleGetPersonalInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalInfoValidateBeforeCall(ID, country, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetPersonalInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonalInfoRequestBuilder {
        private final String ID;
        private String country;
        private Long limit;
        private Long offset;

        private GetPersonalInfoRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set country
         * @param country  (optional)
         * @return GetPersonalInfoRequestBuilder
         */
        public GetPersonalInfoRequestBuilder country(String country) {
            this.country = country;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPersonalInfoRequestBuilder
         */
        public GetPersonalInfoRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPersonalInfoRequestBuilder
         */
        public GetPersonalInfoRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPersonalInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalInfoCall(ID, country, limit, offset, _callback);
        }


        /**
         * Execute getPersonalInfo request
         * @return PeopleGetPersonalInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetPersonalInfoResponse execute() throws ApiException {
            ApiResponse<PeopleGetPersonalInfoResponse> localVarResp = getPersonalInfoWithHttpInfo(ID, country, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonalInfo request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetPersonalInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetPersonalInfoResponse> executeWithHttpInfo() throws ApiException {
            return getPersonalInfoWithHttpInfo(ID, country, limit, offset);
        }

        /**
         * Execute getPersonalInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetPersonalInfoResponse> _callback) throws ApiException {
            return getPersonalInfoAsync(ID, country, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of personal information.
     * Retrieves all personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
     * @param ID The Workday ID of the resource. (required)
     * @return GetPersonalInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonalInfoRequestBuilder getPersonalInfo(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetPersonalInfoRequestBuilder(ID);
    }
    private okhttp3.Call getPersonalInfo_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/personalInformation/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalInfo_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPersonalInfo_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getPersonalInfo_0(Async)");
        }

        return getPersonalInfo_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<PersonalInformation414c4cee7d91100023fe329d6f900018> getPersonalInfo_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getPersonalInfo_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<PersonalInformation414c4cee7d91100023fe329d6f900018>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalInfo_0Async(String ID, String subresourceID, final ApiCallback<PersonalInformation414c4cee7d91100023fe329d6f900018> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalInfo_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<PersonalInformation414c4cee7d91100023fe329d6f900018>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonalInfo0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetPersonalInfo0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getPersonalInfo_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalInfo_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getPersonalInfo_0 request
         * @return PersonalInformation414c4cee7d91100023fe329d6f900018
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PersonalInformation414c4cee7d91100023fe329d6f900018 execute() throws ApiException {
            ApiResponse<PersonalInformation414c4cee7d91100023fe329d6f900018> localVarResp = getPersonalInfo_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonalInfo_0 request with HTTP info returned
         * @return ApiResponse&lt;PersonalInformation414c4cee7d91100023fe329d6f900018&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonalInformation414c4cee7d91100023fe329d6f900018> executeWithHttpInfo() throws ApiException {
            return getPersonalInfo_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getPersonalInfo_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonalInformation414c4cee7d91100023fe329d6f900018> _callback) throws ApiException {
            return getPersonalInfo_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a person&#39;s personal information.
     * Retrieves personal information for the person with the specified ID.  Secured by: Person Data: Personal Information, Self-Service: Personal Information  Scope: Personal Data
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetPersonalInfo0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonalInfo0RequestBuilder getPersonalInfo_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetPersonalInfo0RequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getPersonalPhotoCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/photos/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalPhotoValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPersonalPhoto(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getPersonalPhoto(Async)");
        }

        return getPersonalPhotoCall(ID, subresourceID, _callback);

    }


    private ApiResponse<PersonPhoto6b9baf67ce60100007d43c79e7a30011> getPersonalPhotoWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getPersonalPhotoValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<PersonPhoto6b9baf67ce60100007d43c79e7a30011>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalPhotoAsync(String ID, String subresourceID, final ApiCallback<PersonPhoto6b9baf67ce60100007d43c79e7a30011> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalPhotoValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<PersonPhoto6b9baf67ce60100007d43c79e7a30011>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonalPhotoRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetPersonalPhotoRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getPersonalPhoto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalPhotoCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getPersonalPhoto request
         * @return PersonPhoto6b9baf67ce60100007d43c79e7a30011
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PersonPhoto6b9baf67ce60100007d43c79e7a30011 execute() throws ApiException {
            ApiResponse<PersonPhoto6b9baf67ce60100007d43c79e7a30011> localVarResp = getPersonalPhotoWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonalPhoto request with HTTP info returned
         * @return ApiResponse&lt;PersonPhoto6b9baf67ce60100007d43c79e7a30011&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonPhoto6b9baf67ce60100007d43c79e7a30011> executeWithHttpInfo() throws ApiException {
            return getPersonalPhotoWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getPersonalPhoto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonPhoto6b9baf67ce60100007d43c79e7a30011> _callback) throws ApiException {
            return getPersonalPhotoAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a personal photo.
     * Retrieves a personal photo for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetPersonalPhotoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonalPhotoRequestBuilder getPersonalPhoto(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetPersonalPhotoRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getPersonalPhotosCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/photos"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalPhotosValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPersonalPhotos(Async)");
        }

        return getPersonalPhotosCall(ID, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetPersonalPhotosResponse> getPersonalPhotosWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPersonalPhotosValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetPersonalPhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonalPhotosAsync(String ID, Long limit, Long offset, final ApiCallback<PeopleGetPersonalPhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalPhotosValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetPersonalPhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonalPhotosRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetPersonalPhotosRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPersonalPhotosRequestBuilder
         */
        public GetPersonalPhotosRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPersonalPhotosRequestBuilder
         */
        public GetPersonalPhotosRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPersonalPhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonalPhotosCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getPersonalPhotos request
         * @return PeopleGetPersonalPhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetPersonalPhotosResponse execute() throws ApiException {
            ApiResponse<PeopleGetPersonalPhotosResponse> localVarResp = getPersonalPhotosWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonalPhotos request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetPersonalPhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetPersonalPhotosResponse> executeWithHttpInfo() throws ApiException {
            return getPersonalPhotosWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getPersonalPhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetPersonalPhotosResponse> _callback) throws ApiException {
            return getPersonalPhotosAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of personal photos.
     * Retrieves all personal photos for the person with the specified ID.  Secured by: Person Data: Personal Photo, Self-Service: Personal Photo  Scope: Personal Data  Contains attachment(s)
     * @param ID The Workday ID of the resource. (required)
     * @return GetPersonalPhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonalPhotosRequestBuilder getPersonalPhotos(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetPersonalPhotosRequestBuilder(ID);
    }
    private okhttp3.Call getPreferredNameCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/preferredName"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreferredNameValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPreferredName(Async)");
        }

        return getPreferredNameCall(ID, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetPreferredNameResponse> getPreferredNameWithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPreferredNameValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetPreferredNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPreferredNameAsync(String ID, Long limit, Long offset, final ApiCallback<PeopleGetPreferredNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreferredNameValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetPreferredNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPreferredNameRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetPreferredNameRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPreferredNameRequestBuilder
         */
        public GetPreferredNameRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPreferredNameRequestBuilder
         */
        public GetPreferredNameRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPreferredName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPreferredNameCall(ID, limit, offset, _callback);
        }


        /**
         * Execute getPreferredName request
         * @return PeopleGetPreferredNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetPreferredNameResponse execute() throws ApiException {
            ApiResponse<PeopleGetPreferredNameResponse> localVarResp = getPreferredNameWithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPreferredName request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetPreferredNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetPreferredNameResponse> executeWithHttpInfo() throws ApiException {
            return getPreferredNameWithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getPreferredName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetPreferredNameResponse> _callback) throws ApiException {
            return getPreferredNameAsync(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves the preferred name instance.
     * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetPreferredNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPreferredNameRequestBuilder getPreferredName(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetPreferredNameRequestBuilder(ID);
    }
    private okhttp3.Call getPreferredName_0Call(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/preferredName/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreferredName_0ValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPreferredName_0(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getPreferredName_0(Async)");
        }

        return getPreferredName_0Call(ID, subresourceID, _callback);

    }


    private ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> getPreferredName_0WithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getPreferredName_0ValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<Name33e26848dc0010002f1ae76d63ec0061>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPreferredName_0Async(String ID, String subresourceID, final ApiCallback<Name33e26848dc0010002f1ae76d63ec0061> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreferredName_0ValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<Name33e26848dc0010002f1ae76d63ec0061>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPreferredName0RequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetPreferredName0RequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getPreferredName_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPreferredName_0Call(ID, subresourceID, _callback);
        }


        /**
         * Execute getPreferredName_0 request
         * @return Name33e26848dc0010002f1ae76d63ec0061
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public Name33e26848dc0010002f1ae76d63ec0061 execute() throws ApiException {
            ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> localVarResp = getPreferredName_0WithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPreferredName_0 request with HTTP info returned
         * @return ApiResponse&lt;Name33e26848dc0010002f1ae76d63ec0061&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Name33e26848dc0010002f1ae76d63ec0061> executeWithHttpInfo() throws ApiException {
            return getPreferredName_0WithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getPreferredName_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Name33e26848dc0010002f1ae76d63ec0061> _callback) throws ApiException {
            return getPreferredName_0Async(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves the preferred name instance.
     * Retrieves the preferred name for the person with the specified ID.  Secured by: Person Data: Preferred Name, Self-Service: Preferred Name  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetPreferredName0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPreferredName0RequestBuilder getPreferredName_0(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetPreferredName0RequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getPublicContactInformationCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/publicContactInformation/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicContactInformationValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPublicContactInformation(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getPublicContactInformation(Async)");
        }

        return getPublicContactInformationCall(ID, subresourceID, _callback);

    }


    private ApiResponse<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235> getPublicContactInformationWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getPublicContactInformationValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPublicContactInformationAsync(String ID, String subresourceID, final ApiCallback<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicContactInformationValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPublicContactInformationRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetPublicContactInformationRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getPublicContactInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPublicContactInformationCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getPublicContactInformation request
         * @return PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235 execute() throws ApiException {
            ApiResponse<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235> localVarResp = getPublicContactInformationWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPublicContactInformation request with HTTP info returned
         * @return ApiResponse&lt;PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235> executeWithHttpInfo() throws ApiException {
            return getPublicContactInformationWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getPublicContactInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonPublicRepresentationD8f2aecf3d63100016a77ab413a20235> _callback) throws ApiException {
            return getPublicContactInformationAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a person&#39;s public contact information.
     * Retrieves public contact information for the person with the specified ID.  Secured by: REST API Public
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetPublicContactInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicContactInformationRequestBuilder getPublicContactInformation(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetPublicContactInformationRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getPublicContactInformation_0Call(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/publicContactInformation"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPublicContactInformation_0ValidateBeforeCall(String ID, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getPublicContactInformation_0(Async)");
        }

        return getPublicContactInformation_0Call(ID, limit, offset, _callback);

    }


    private ApiResponse<PeopleGetPublicContactInformationResponse> getPublicContactInformation_0WithHttpInfo(String ID, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getPublicContactInformation_0ValidateBeforeCall(ID, limit, offset, null);
        Type localVarReturnType = new TypeToken<PeopleGetPublicContactInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPublicContactInformation_0Async(String ID, Long limit, Long offset, final ApiCallback<PeopleGetPublicContactInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPublicContactInformation_0ValidateBeforeCall(ID, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetPublicContactInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPublicContactInformation0RequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;

        private GetPublicContactInformation0RequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetPublicContactInformation0RequestBuilder
         */
        public GetPublicContactInformation0RequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetPublicContactInformation0RequestBuilder
         */
        public GetPublicContactInformation0RequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for getPublicContactInformation_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPublicContactInformation_0Call(ID, limit, offset, _callback);
        }


        /**
         * Execute getPublicContactInformation_0 request
         * @return PeopleGetPublicContactInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetPublicContactInformationResponse execute() throws ApiException {
            ApiResponse<PeopleGetPublicContactInformationResponse> localVarResp = getPublicContactInformation_0WithHttpInfo(ID, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPublicContactInformation_0 request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetPublicContactInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetPublicContactInformationResponse> executeWithHttpInfo() throws ApiException {
            return getPublicContactInformation_0WithHttpInfo(ID, limit, offset);
        }

        /**
         * Execute getPublicContactInformation_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetPublicContactInformationResponse> _callback) throws ApiException {
            return getPublicContactInformation_0Async(ID, limit, offset, _callback);
        }
    }

    /**
     * Retrieves a collection of public contact information.
     * Retrieves all public contact information for the person with the specified ID.  Secured by: REST API Public
     * @param ID The Workday ID of the resource. (required)
     * @return GetPublicContactInformation0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetPublicContactInformation0RequestBuilder getPublicContactInformation_0(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetPublicContactInformation0RequestBuilder(ID);
    }
    private okhttp3.Call getWorkAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWorkAddress(Async)");
        }

        return getWorkAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<AddressReference9c3ab7b846e4100009e5ec55fa530024> getWorkAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWorkAddressValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<AddressReference9c3ab7b846e4100009e5ec55fa530024>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkAddressAsync(String ID, String subresourceID, final ApiCallback<AddressReference9c3ab7b846e4100009e5ec55fa530024> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkAddressValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<AddressReference9c3ab7b846e4100009e5ec55fa530024>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWorkAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWorkAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWorkAddress request
         * @return AddressReference9c3ab7b846e4100009e5ec55fa530024
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public AddressReference9c3ab7b846e4100009e5ec55fa530024 execute() throws ApiException {
            ApiResponse<AddressReference9c3ab7b846e4100009e5ec55fa530024> localVarResp = getWorkAddressWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkAddress request with HTTP info returned
         * @return ApiResponse&lt;AddressReference9c3ab7b846e4100009e5ec55fa530024&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddressReference9c3ab7b846e4100009e5ec55fa530024> executeWithHttpInfo() throws ApiException {
            return getWorkAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWorkAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddressReference9c3ab7b846e4100009e5ec55fa530024> _callback) throws ApiException {
            return getWorkAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a work address.
     * Retrieves a work address for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWorkAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkAddressRequestBuilder getWorkAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWorkAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWorkAddressesCall(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (effective != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effective", effective));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkAddressesValidateBeforeCall(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkAddresses(Async)");
        }

        return getWorkAddressesCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetWorkAddressesResponse> getWorkAddressesWithHttpInfo(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getWorkAddressesValidateBeforeCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetWorkAddressesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkAddressesAsync(String ID, LocalDate effective, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetWorkAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkAddressesValidateBeforeCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetWorkAddressesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkAddressesRequestBuilder {
        private final String ID;
        private LocalDate effective;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetWorkAddressesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set effective
         * @param effective The effective date of the person&#39;s addresses using the yyyy-mm-dd format. (optional)
         * @return GetWorkAddressesRequestBuilder
         */
        public GetWorkAddressesRequestBuilder effective(LocalDate effective) {
            this.effective = effective;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetWorkAddressesRequestBuilder
         */
        public GetWorkAddressesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkAddressesRequestBuilder
         */
        public GetWorkAddressesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary addresses. (optional)
         * @return GetWorkAddressesRequestBuilder
         */
        public GetWorkAddressesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public addresses. (optional)
         * @return GetWorkAddressesRequestBuilder
         */
        public GetWorkAddressesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetWorkAddressesRequestBuilder
         */
        public GetWorkAddressesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getWorkAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkAddressesCall(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getWorkAddresses request
         * @return PeopleGetWorkAddressesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetWorkAddressesResponse execute() throws ApiException {
            ApiResponse<PeopleGetWorkAddressesResponse> localVarResp = getWorkAddressesWithHttpInfo(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkAddresses request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetWorkAddressesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetWorkAddressesResponse> executeWithHttpInfo() throws ApiException {
            return getWorkAddressesWithHttpInfo(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getWorkAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetWorkAddressesResponse> _callback) throws ApiException {
            return getWorkAddressesAsync(ID, effective, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of work addresses.
     * Retrieves all work addresses for the person with the specified ID.  Secured by: Person Data: Work Address, Self-Service: Work Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetWorkAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkAddressesRequestBuilder getWorkAddresses(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetWorkAddressesRequestBuilder(ID);
    }
    private okhttp3.Call getWorkEmailCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workEmails/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkEmailValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkEmail(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWorkEmail(Async)");
        }

        return getWorkEmailCall(ID, subresourceID, _callback);

    }


    private ApiResponse<EmailReference9c3ab7b846e41000327e788d9664012a> getWorkEmailWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWorkEmailValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<EmailReference9c3ab7b846e41000327e788d9664012a>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkEmailAsync(String ID, String subresourceID, final ApiCallback<EmailReference9c3ab7b846e41000327e788d9664012a> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkEmailValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<EmailReference9c3ab7b846e41000327e788d9664012a>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkEmailRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWorkEmailRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWorkEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkEmailCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWorkEmail request
         * @return EmailReference9c3ab7b846e41000327e788d9664012a
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public EmailReference9c3ab7b846e41000327e788d9664012a execute() throws ApiException {
            ApiResponse<EmailReference9c3ab7b846e41000327e788d9664012a> localVarResp = getWorkEmailWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkEmail request with HTTP info returned
         * @return ApiResponse&lt;EmailReference9c3ab7b846e41000327e788d9664012a&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailReference9c3ab7b846e41000327e788d9664012a> executeWithHttpInfo() throws ApiException {
            return getWorkEmailWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWorkEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailReference9c3ab7b846e41000327e788d9664012a> _callback) throws ApiException {
            return getWorkEmailAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a work email address.
     * Retrieves a work email address for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWorkEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkEmailRequestBuilder getWorkEmail(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWorkEmailRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWorkEmailsCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workEmails"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkEmailsValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkEmails(Async)");
        }

        return getWorkEmailsCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetWorkEmailsResponse> getWorkEmailsWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getWorkEmailsValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetWorkEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkEmailsAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetWorkEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkEmailsValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetWorkEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkEmailsRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetWorkEmailsRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetWorkEmailsRequestBuilder
         */
        public GetWorkEmailsRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkEmailsRequestBuilder
         */
        public GetWorkEmailsRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary email addresses. (optional)
         * @return GetWorkEmailsRequestBuilder
         */
        public GetWorkEmailsRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public email addresses. (optional)
         * @return GetWorkEmailsRequestBuilder
         */
        public GetWorkEmailsRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetWorkEmailsRequestBuilder
         */
        public GetWorkEmailsRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getWorkEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkEmailsCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getWorkEmails request
         * @return PeopleGetWorkEmailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetWorkEmailsResponse execute() throws ApiException {
            ApiResponse<PeopleGetWorkEmailsResponse> localVarResp = getWorkEmailsWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkEmails request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetWorkEmailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetWorkEmailsResponse> executeWithHttpInfo() throws ApiException {
            return getWorkEmailsWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getWorkEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetWorkEmailsResponse> _callback) throws ApiException {
            return getWorkEmailsAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of work email addresses.
     * Retrieves all work email addresses for the person with the specified ID.  Secured by: Person Data: Work Email, Self-Service: Work Email  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetWorkEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkEmailsRequestBuilder getWorkEmails(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetWorkEmailsRequestBuilder(ID);
    }
    private okhttp3.Call getWorkInstantMessengerUsernameCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workInstantMessengers/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkInstantMessengerUsernameValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkInstantMessengerUsername(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWorkInstantMessengerUsername(Async)");
        }

        return getWorkInstantMessengerUsernameCall(ID, subresourceID, _callback);

    }


    private ApiResponse<InstantMessengerAccount33e26848dc00100036f723337ebb0132> getWorkInstantMessengerUsernameWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWorkInstantMessengerUsernameValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<InstantMessengerAccount33e26848dc00100036f723337ebb0132>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkInstantMessengerUsernameAsync(String ID, String subresourceID, final ApiCallback<InstantMessengerAccount33e26848dc00100036f723337ebb0132> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkInstantMessengerUsernameValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<InstantMessengerAccount33e26848dc00100036f723337ebb0132>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkInstantMessengerUsernameRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWorkInstantMessengerUsernameRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWorkInstantMessengerUsername
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkInstantMessengerUsernameCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWorkInstantMessengerUsername request
         * @return InstantMessengerAccount33e26848dc00100036f723337ebb0132
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public InstantMessengerAccount33e26848dc00100036f723337ebb0132 execute() throws ApiException {
            ApiResponse<InstantMessengerAccount33e26848dc00100036f723337ebb0132> localVarResp = getWorkInstantMessengerUsernameWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkInstantMessengerUsername request with HTTP info returned
         * @return ApiResponse&lt;InstantMessengerAccount33e26848dc00100036f723337ebb0132&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstantMessengerAccount33e26848dc00100036f723337ebb0132> executeWithHttpInfo() throws ApiException {
            return getWorkInstantMessengerUsernameWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWorkInstantMessengerUsername request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstantMessengerAccount33e26848dc00100036f723337ebb0132> _callback) throws ApiException {
            return getWorkInstantMessengerUsernameAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a work instant messenger account username.
     * Retrieves a work instant messenger account username for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWorkInstantMessengerUsernameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkInstantMessengerUsernameRequestBuilder getWorkInstantMessengerUsername(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWorkInstantMessengerUsernameRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWorkInstantMessengerUsernamesCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workInstantMessengers"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkInstantMessengerUsernamesValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkInstantMessengerUsernames(Async)");
        }

        return getWorkInstantMessengerUsernamesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetWorkInstantMessengerUsernamesResponse> getWorkInstantMessengerUsernamesWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getWorkInstantMessengerUsernamesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetWorkInstantMessengerUsernamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkInstantMessengerUsernamesAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetWorkInstantMessengerUsernamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkInstantMessengerUsernamesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetWorkInstantMessengerUsernamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkInstantMessengerUsernamesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetWorkInstantMessengerUsernamesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetWorkInstantMessengerUsernamesRequestBuilder
         */
        public GetWorkInstantMessengerUsernamesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkInstantMessengerUsernamesRequestBuilder
         */
        public GetWorkInstantMessengerUsernamesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary instant messenger account usernames. (optional)
         * @return GetWorkInstantMessengerUsernamesRequestBuilder
         */
        public GetWorkInstantMessengerUsernamesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public instant messenger usernames. (optional)
         * @return GetWorkInstantMessengerUsernamesRequestBuilder
         */
        public GetWorkInstantMessengerUsernamesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetWorkInstantMessengerUsernamesRequestBuilder
         */
        public GetWorkInstantMessengerUsernamesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getWorkInstantMessengerUsernames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkInstantMessengerUsernamesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getWorkInstantMessengerUsernames request
         * @return PeopleGetWorkInstantMessengerUsernamesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetWorkInstantMessengerUsernamesResponse execute() throws ApiException {
            ApiResponse<PeopleGetWorkInstantMessengerUsernamesResponse> localVarResp = getWorkInstantMessengerUsernamesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkInstantMessengerUsernames request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetWorkInstantMessengerUsernamesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetWorkInstantMessengerUsernamesResponse> executeWithHttpInfo() throws ApiException {
            return getWorkInstantMessengerUsernamesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getWorkInstantMessengerUsernames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetWorkInstantMessengerUsernamesResponse> _callback) throws ApiException {
            return getWorkInstantMessengerUsernamesAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of work instant messenger accounts usernames.
     * Retrieves all work instant messenger account usernames for the person with the specified ID.  Secured by: Person Data: Work Instant Messenger, Self-Service: Work Instant Messenger  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetWorkInstantMessengerUsernamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkInstantMessengerUsernamesRequestBuilder getWorkInstantMessengerUsernames(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetWorkInstantMessengerUsernamesRequestBuilder(ID);
    }
    private okhttp3.Call getWorkPhoneCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workPhones/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkPhoneValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkPhone(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWorkPhone(Async)");
        }

        return getWorkPhoneCall(ID, subresourceID, _callback);

    }


    private ApiResponse<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> getWorkPhoneWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWorkPhoneValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkPhoneAsync(String ID, String subresourceID, final ApiCallback<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkPhoneValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkPhoneRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWorkPhoneRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWorkPhone
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkPhoneCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWorkPhone request
         * @return PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd execute() throws ApiException {
            ApiResponse<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> localVarResp = getWorkPhoneWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkPhone request with HTTP info returned
         * @return ApiResponse&lt;PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> executeWithHttpInfo() throws ApiException {
            return getWorkPhoneWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWorkPhone request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneReferenceDf014bc8b5fa10000af0fe7cb0ab00dd> _callback) throws ApiException {
            return getWorkPhoneAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a work phone number.
     * Retrieves a work phone number for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWorkPhoneRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkPhoneRequestBuilder getWorkPhone(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWorkPhoneRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWorkPhonesCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workPhones"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkPhonesValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkPhones(Async)");
        }

        return getWorkPhonesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetWorkPhonesResponse> getWorkPhonesWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getWorkPhonesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetWorkPhonesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkPhonesAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetWorkPhonesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkPhonesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetWorkPhonesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkPhonesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetWorkPhonesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetWorkPhonesRequestBuilder
         */
        public GetWorkPhonesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkPhonesRequestBuilder
         */
        public GetWorkPhonesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary phone numbers. (optional)
         * @return GetWorkPhonesRequestBuilder
         */
        public GetWorkPhonesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public phone numbers. (optional)
         * @return GetWorkPhonesRequestBuilder
         */
        public GetWorkPhonesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetWorkPhonesRequestBuilder
         */
        public GetWorkPhonesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getWorkPhones
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkPhonesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getWorkPhones request
         * @return PeopleGetWorkPhonesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetWorkPhonesResponse execute() throws ApiException {
            ApiResponse<PeopleGetWorkPhonesResponse> localVarResp = getWorkPhonesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkPhones request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetWorkPhonesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetWorkPhonesResponse> executeWithHttpInfo() throws ApiException {
            return getWorkPhonesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getWorkPhones request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetWorkPhonesResponse> _callback) throws ApiException {
            return getWorkPhonesAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of work phone numbers.
     * Retrieves all work phone numbers for the person with the specified ID.  Secured by: Person Data: Work Phone, Self-Service: Work Phone  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetWorkPhonesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkPhonesRequestBuilder getWorkPhones(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetWorkPhonesRequestBuilder(ID);
    }
    private okhttp3.Call getWorkWebAddressCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workWebAddresses/{subresourceID}"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()))
            .replace("{" + "subresourceID" + "}", localVarApiClient.escapeString(subresourceID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkWebAddressValidateBeforeCall(String ID, String subresourceID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkWebAddress(Async)");
        }

        // verify the required parameter 'subresourceID' is set
        if (subresourceID == null) {
            throw new ApiException("Missing the required parameter 'subresourceID' when calling getWorkWebAddress(Async)");
        }

        return getWorkWebAddressCall(ID, subresourceID, _callback);

    }


    private ApiResponse<WebAddress33e26848dc0010003893a0202ced0165> getWorkWebAddressWithHttpInfo(String ID, String subresourceID) throws ApiException {
        okhttp3.Call localVarCall = getWorkWebAddressValidateBeforeCall(ID, subresourceID, null);
        Type localVarReturnType = new TypeToken<WebAddress33e26848dc0010003893a0202ced0165>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkWebAddressAsync(String ID, String subresourceID, final ApiCallback<WebAddress33e26848dc0010003893a0202ced0165> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkWebAddressValidateBeforeCall(ID, subresourceID, _callback);
        Type localVarReturnType = new TypeToken<WebAddress33e26848dc0010003893a0202ced0165>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkWebAddressRequestBuilder {
        private final String ID;
        private final String subresourceID;

        private GetWorkWebAddressRequestBuilder(String ID, String subresourceID) {
            this.ID = ID;
            this.subresourceID = subresourceID;
        }

        /**
         * Build call for getWorkWebAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkWebAddressCall(ID, subresourceID, _callback);
        }


        /**
         * Execute getWorkWebAddress request
         * @return WebAddress33e26848dc0010003893a0202ced0165
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public WebAddress33e26848dc0010003893a0202ced0165 execute() throws ApiException {
            ApiResponse<WebAddress33e26848dc0010003893a0202ced0165> localVarResp = getWorkWebAddressWithHttpInfo(ID, subresourceID);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkWebAddress request with HTTP info returned
         * @return ApiResponse&lt;WebAddress33e26848dc0010003893a0202ced0165&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebAddress33e26848dc0010003893a0202ced0165> executeWithHttpInfo() throws ApiException {
            return getWorkWebAddressWithHttpInfo(ID, subresourceID);
        }

        /**
         * Execute getWorkWebAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebAddress33e26848dc0010003893a0202ced0165> _callback) throws ApiException {
            return getWorkWebAddressAsync(ID, subresourceID, _callback);
        }
    }

    /**
     * Retrieves a work web address.
     * Retrieves a work web address for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @param subresourceID The Workday ID of the subresource. (required)
     * @return GetWorkWebAddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkWebAddressRequestBuilder getWorkWebAddress(String ID, String subresourceID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        if (subresourceID == null) throw new IllegalArgumentException("\"subresourceID\" is required but got null");
            

        return new GetWorkWebAddressRequestBuilder(ID, subresourceID);
    }
    private okhttp3.Call getWorkWebAddressesCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{ID}/workWebAddresses"
            .replace("{" + "ID" + "}", localVarApiClient.escapeString(ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (primaryOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryOnly", primaryOnly));
        }

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        if (usedFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usedFor", usedFor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkWebAddressesValidateBeforeCall(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ID' is set
        if (ID == null) {
            throw new ApiException("Missing the required parameter 'ID' when calling getWorkWebAddresses(Async)");
        }

        return getWorkWebAddressesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);

    }


    private ApiResponse<PeopleGetWorkWebAddressesResponse> getWorkWebAddressesWithHttpInfo(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor) throws ApiException {
        okhttp3.Call localVarCall = getWorkWebAddressesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, null);
        Type localVarReturnType = new TypeToken<PeopleGetWorkWebAddressesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkWebAddressesAsync(String ID, Long limit, Long offset, Boolean primaryOnly, Boolean publicOnly, String usedFor, final ApiCallback<PeopleGetWorkWebAddressesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkWebAddressesValidateBeforeCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        Type localVarReturnType = new TypeToken<PeopleGetWorkWebAddressesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkWebAddressesRequestBuilder {
        private final String ID;
        private Long limit;
        private Long offset;
        private Boolean primaryOnly;
        private Boolean publicOnly;
        private String usedFor;

        private GetWorkWebAddressesRequestBuilder(String ID) {
            this.ID = ID;
        }

        /**
         * Set limit
         * @param limit The maximum number of objects in a single response. The default is 20. The maximum is 100. (optional)
         * @return GetWorkWebAddressesRequestBuilder
         */
        public GetWorkWebAddressesRequestBuilder limit(Long limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The zero-based index of the first object in a response collection. The default is 0. Use offset with the limit parameter to control paging of a response collection. Example: If limit is 5 and offset is 9, the response returns a collection of 5 objects starting with the 10th object. (optional)
         * @return GetWorkWebAddressesRequestBuilder
         */
        public GetWorkWebAddressesRequestBuilder offset(Long offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set primaryOnly
         * @param primaryOnly If true, returns only the IDs of the person&#39;s primary web addresses. (optional)
         * @return GetWorkWebAddressesRequestBuilder
         */
        public GetWorkWebAddressesRequestBuilder primaryOnly(Boolean primaryOnly) {
            this.primaryOnly = primaryOnly;
            return this;
        }
        
        /**
         * Set publicOnly
         * @param publicOnly If true, returns only the IDs of the person&#39;s public web addresses. (optional)
         * @return GetWorkWebAddressesRequestBuilder
         */
        public GetWorkWebAddressesRequestBuilder publicOnly(Boolean publicOnly) {
            this.publicOnly = publicOnly;
            return this;
        }
        
        /**
         * Set usedFor
         * @param usedFor Specifies usage behavior, such as mailing, billing, or shipping. Optional. (optional)
         * @return GetWorkWebAddressesRequestBuilder
         */
        public GetWorkWebAddressesRequestBuilder usedFor(String usedFor) {
            this.usedFor = usedFor;
            return this;
        }
        
        /**
         * Build call for getWorkWebAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkWebAddressesCall(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }


        /**
         * Execute getWorkWebAddresses request
         * @return PeopleGetWorkWebAddressesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public PeopleGetWorkWebAddressesResponse execute() throws ApiException {
            ApiResponse<PeopleGetWorkWebAddressesResponse> localVarResp = getWorkWebAddressesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkWebAddresses request with HTTP info returned
         * @return ApiResponse&lt;PeopleGetWorkWebAddressesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PeopleGetWorkWebAddressesResponse> executeWithHttpInfo() throws ApiException {
            return getWorkWebAddressesWithHttpInfo(ID, limit, offset, primaryOnly, publicOnly, usedFor);
        }

        /**
         * Execute getWorkWebAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PeopleGetWorkWebAddressesResponse> _callback) throws ApiException {
            return getWorkWebAddressesAsync(ID, limit, offset, primaryOnly, publicOnly, usedFor, _callback);
        }
    }

    /**
     * Retrieves a collection of work web addresses.
     * Retrieves all work web addresses for the person with the specified ID.  Secured by: Person Data: Work Web Address, Self-Service: Work Web Address  Scope: Contact Information
     * @param ID The Workday ID of the resource. (required)
     * @return GetWorkWebAddressesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. A successful response can return no matched data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkWebAddressesRequestBuilder getWorkWebAddresses(String ID) throws IllegalArgumentException {
        if (ID == null) throw new IllegalArgumentException("\"ID\" is required but got null");
            

        return new GetWorkWebAddressesRequestBuilder(ID);
    }
}
